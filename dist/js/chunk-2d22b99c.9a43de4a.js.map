{"version":3,"sources":["webpack:////Users/mariaarevalo/node_modules/idb/build/wrap-idb-value.js","webpack:////Users/mariaarevalo/node_modules/idb/build/index.js"],"names":["instanceOfAny","object","constructors","some","c","idbProxyableTypes","cursorAdvanceMethods","getIdbProxyableTypes","IDBDatabase","IDBObjectStore","IDBIndex","IDBCursor","IDBTransaction","getCursorAdvanceMethods","prototype","advance","continue","continuePrimaryKey","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","promisifyRequest","request","promise","Promise","resolve","reject","unlisten","removeEventListener","success","error","wrap","result","addEventListener","then","value","set","catch","cacheDonePromiseForTransaction","tx","has","done","complete","DOMException","idbProxyTraps","target","prop","receiver","get","objectStoreNames","undefined","objectStore","replaceTraps","callback","wrapFunction","func","transaction","includes","args","apply","unwrap","this","storeNames","call","sort","transformCachableValue","Proxy","IDBRequest","newValue","openDB","name","version","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","db","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","replace","useIndex","isWrite","method","async","storeName","store","index","shift","all","oldTraps"],"mappings":"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","file":"js/chunk-2d22b99c.9a43de4a.js","sourcesContent":["const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n"],"sourceRoot":""}