{"version":3,"sources":["webpack:////Users/mariaarevalo/node_modules/@firebase/logger/dist/esm/index.esm2017.js","webpack:////Users/mariaarevalo/node_modules/@firebase/util/dist/index.esm2017.js","webpack:////Users/mariaarevalo/node_modules/@firebase/storage/dist/index.esm2017.js","webpack:////Users/mariaarevalo/node_modules/@firebase/storage-compat/dist/esm/index.esm2017.js"],"names":["instances","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","instance","logType","args","logLevel","now","Date","toISOString","method","Error","console","name","Logger","this","_logLevel","_logHandler","_userLogHandler","push","val","TypeError","setLogLevel","level","forEach","inst","setUserLogHandler","logCallback","options","customLogLevel","userLogHandler","message","map","arg","toString","JSON","stringify","ignored","filter","join","toLowerCase","type","stringToByteArray$1","str","out","p","i","length","c","charCodeAt","byteArrayToString","bytes","pos","c1","String","fromCharCode","c2","c3","c4","u","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","HAS_NATIVE_SUPPORT","atob","input","webSafe","Array","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","btoa","encodeByteArray","decodeStringToByteArray","charToByteMap","charAt","haveByte4","byte4","DecodeBase64StringError","ENCODED_VALS","ENCODED_VALS_WEBSAFE","super","arguments","base64Encode","utf8Bytes","base64urlEncodeWithoutPadding","replace","base64Decode","decodeString","e","error","deepExtend","target","source","Object","constructor","dateValue","getTime","undefined","prop","hasOwnProperty","isValidKey","key","getGlobal","self","window","global","getDefaultsFromGlobal","__FIREBASE_DEFAULTS__","getDefaultsFromEnvVariable","process","defaultsJsonString","parse","getDefaultsFromCookie","document","match","cookie","decoded","getDefaults","info","getDefaultEmulatorHost","productName","_a","_b","emulatorHosts","getDefaultEmulatorHostnameAndPort","host","separatorIndex","lastIndexOf","port","parseInt","substring","getDefaultAppConfig","config","getExperimentalSetting","Deferred","reject","resolve","promise","Promise","callback","value","catch","createMockUserToken","token","projectId","uid","header","alg","project","iat","sub","user_id","payload","assign","iss","aud","exp","auth_time","firebase","sign_in_provider","identities","signature","getUA","navigator","isMobileCordova","test","isNode","forceEnvironment","prototype","call","isBrowser","isBrowserExtension","runtime","chrome","browser","id","isReactNative","isIE","ua","indexOf","isSafari","userAgent","includes","isIndexedDBAvailable","indexedDB","validateIndexedDBOpenable","preExist","DB_CHECK_NAME","request","open","onsuccess","result","close","deleteDatabase","onupgradeneeded","onerror","ERROR_NAME","FirebaseError","code","customData","setPrototypeOf","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","replaceTemplate","fullMessage","PATTERN","_","contains","obj","isEmpty","deepEqual","a","b","aKeys","keys","bKeys","k","aProp","bProp","isObject","thing","querystring","querystringParams","params","entries","arrayVal","encodeURIComponent","querystringDecode","tokens","split","decodeURIComponent","extractQuerystring","url","queryStart","fragmentStart","createSubscribe","executor","onNoObservers","proxy","ObserverProxy","subscribe","bind","observers","unsubscribes","observerCount","task","finalized","then","forEachObserver","observer","next","complete","nextOrObserver","implementsAnyMethods","noop","unsub","unsubscribeOne","finalError","fn","sendOne","err","methods","getModularInstance","_delegate","DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","DEFAULT_MIN_SLEEP_TIME_MILLIS","status_","prependCode","serverResponse","_baseMessage","status","StorageErrorCode","ErrorCode","unknown","UNKNOWN","objectNotFound","path","OBJECT_NOT_FOUND","quotaExceeded","bucket","QUOTA_EXCEEDED","unauthenticated","UNAUTHENTICATED","unauthorizedApp","UNAUTHORIZED_APP","unauthorized","UNAUTHORIZED","retryLimitExceeded","RETRY_LIMIT_EXCEEDED","canceled","CANCELED","invalidUrl","INVALID_URL","invalidDefaultBucket","INVALID_DEFAULT_BUCKET","noDefaultBucket","NO_DEFAULT_BUCKET","cannotSliceBlob","CANNOT_SLICE_BLOB","serverFileWrongSize","SERVER_FILE_WRONG_SIZE","noDownloadURL","NO_DOWNLOAD_URL","missingPolyFill","polyFill","UNSUPPORTED_ENVIRONMENT","invalidArgument","INVALID_ARGUMENT","appDeleted","APP_DELETED","invalidRootOperation","INVALID_ROOT_OPERATION","invalidFormat","format","INVALID_FORMAT","internalError","INTERNAL_ERROR","Location","path_","encode","bucketString","bucketLocation","makeFromUrl","location","bucketDomain","gsModify","loc","slice","gsPath","gsRegex","RegExp","gsIndices","httpModify","version","firebaseStorageHost","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","cloudStorageIndices","groups","regex","indices","postModify","group","captures","exec","bucketValue","pathValue","FailRequest","promise_","_appDelete","start","doRequest","backoffCompleteCb","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","apply","callWithDelay","millis","setTimeout","responseHandler","clearGlobalTimeout","clearTimeout","success","mustStop","waitMillis","Math","random","stopped","stop","wasTimeout","isJustDef","isFunction","isNonArrayObject","isString","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","makeUrl","urlPart","protocol","origin","makeQueryString","queryPart","nextPart","isRetryStatusCode","additionalRetryCodes","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","isAdditionalRetryCode","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","retry","pendingConnection_","backoffId_","canceled_","appDelete_","resolve_","reject_","start_","doTheRequest","backoffCallback","RequestEndStatus","connection","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","send","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","getStatus","wasCanceled","ABORT","successCode","backoffDone","requestWentThrough","wasSuccessCode","getResponse","getErrorText","appDelete","abort","addAuthHeader_","headers","authToken","addVersionHeader_","firebaseVersion","addGmpidHeader_","appId","addAppCheckHeader_","appCheckToken","makeRequest","requestInfo","requestFactory","urlParams","body","successCodes","handler","errorHandler","progressCallback","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","getBlob$1","bb","append","getBlob","sliceBlob","blob","end","webkitSlice","mozSlice","decodeBase64","encoded","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","StringData","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","valid","hi","lo","Uint8Array","percentEncodedBytes_","hasMinus","hasUnder","invalidChar","hasPlus","hasSlash","array","DataURLParts","dataURL","matches","middle","endsWith","rest","dataUrl","parts","s","longEnough","FbsBlob","elideCopy","size","blobType","data_","ArrayBuffer","byteLength","set","size_","type_","startByte","endByte","realBlob","sliced","buffer","blobby","uint8Arrays","finalLength","merged","index","jsonObjectOrNull","newPath","child","childPath","canonicalChildPath","component","lastComponent","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","xformPath","fullPath","getMappings","mappings","mappingsXformPath","_metadata","nameMapping","xformSize","Number","sizeMapping","addRef","generateRef","_makeStorageReference","defineProperty","get","fromResource","resource","len","mapping","fromResourceString","resourceString","downloadUrlFromResourceString","tokensList","urls","base","queryString","alt","toResourceString","PREFIXES_KEY","ITEMS_KEY","fromBackendResponse","listResult","prefixes","items","nextPageToken","pathWithoutTrailingSlash","reference","item","fromResponseString","RequestInfo","handlerCheck","cndn","metadataHandler","xhr","text","listHandler","downloadUrlHandler","_protocol","sharedErrorHandler","newErr","objectErrorHandler","shared","getMetadata$2","fullServerUrl","maxOperationRetryTime","list$2","delimiter","pageToken","maxResults","isRoot","bucketOnlyServerUrl","getDownloadUrl","updateMetadata$2","deleteObject$2","_xhr","_text","determineContentType_","metadataForUpload_","metadataClone","multipartUpload","genBoundary","boundary","metadata_","metadataString","preBlobPart","postBlobPart","maxUploadRetryTime","uploadData","ResumableUploadStatus","current","checkResumeHeader_","allowed","getResponseHeader","allowedStatus","createResumableUpload","metadataForUpload","getResumableUploadStatus","sizeString","isNaN","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","bytesLeft","bytesToUpload","min","uploadCommand","uploadStatus","newCurrent","TaskEvent","STATE_CHANGED","TaskState","RUNNING","PAUSED","SUCCESS","taskStateFromInternalTaskState","state","Observer","asFunctions","f","argsToForward","textFactoryOverride","XhrConnection","sent_","xhr_","XMLHttpRequest","initXhr","errorCode_","sendPromise_","addEventListener","NETWORK_ERROR","setRequestHeader","response","statusText","listener","upload","removeEventListener","XhrTextConnection","responseType","newTextConnection","UploadTask","ref","_transferred","_needToFetchStatus","_needToFetchMetadata","_observers","_error","_uploadUrl","_request","_chunkMultiplier","_resolve","_reject","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","_codeEquals","completeTransitions_","backoffExpired","isExponentialBackoffExpired","sleepTime","max","_transition","_metadataErrorHandler","maxSleepTime","storage","_promise","_start","sizeBefore","_updateProgress","_createResumable","_fetchStatus","_fetchMetadata","pendingTimeout","_continueUpload","_oneShotUpload","all","_getAuthToken","_getAppCheckToken","_resolveToken","_location","createRequest","_makeRequest","getPromise","statusRequest","_makeProgressCallback","uploadRequest","newStatus","_increaseMultiplier","currentSize","metadataRequest","multipartRequest","transferred","old","_notifyObservers","cancel","wasPaused","externalState","bytesTransferred","totalBytes","completed","_addObserver","_removeObserver","onFulfilled","onRejected","_notifyObserver","splice","_finishPromise","triggered","snapshot","toCall","Reference","_service","_newRef","uploadBytesResumable$1","_throwIfRoot","listAll$1","accumulator","listAllHelper","async","opt","nextPage","list$1","op","makeRequestWithTokens","getMetadata$1","updateMetadata$1","getDownloadURL$1","deleteObject$1","_getChild$1","isUrl","refFromURL","refFromPath","FirebaseStorageImpl","_bucket","ref$1","serviceOrRef","pathOrUrl","extractBucket","makeFromBucketSpec","connectStorageEmulator$1","mockUserToken","_overrideAuthToken","app","_authProvider","_appCheckProvider","_url","_firebaseVersion","_host","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","time","POSITIVE_INFINITY","auth","getImmediate","optional","tokenData","getToken","accessToken","appCheck","clear","add","delete","STORAGE_TYPE","uploadBytesResumable","getMetadata","updateMetadata","list","listAll","getDownloadURL","deleteObject","_getChild","connectStorageEmulator","factory","container","instanceIdentifier","getProvider","authProvider","appCheckProvider","registerStorage","setMultipleInstances","UploadTaskSnapshotCompat","UploadTaskCompat","pause","resume","wrappedNextOrObserver","taskSnapshot","on","ListResultCompat","root","parent","r","storageExp","identifier","storageServiceCompat","namespaceExports","Storage","INTERNAL","registerComponent","setServiceProps","registerVersion"],"mappings":"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","file":"js/chunk-6b0811ac.8f35398d.js","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n//# sourceMappingURL=index.esm2017.js.map\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nconst CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n */\r\nconst assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n */\r\nconst assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst stringToByteArray$1 = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) === 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\r\nconst byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        const c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            const c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            const c4 = bytes[pos++];\r\n            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\r\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\r\n// Static lookup maps, lazily populated by init_()\r\nconst base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeByteArray(input, webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        const byteToCharMap = webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length; i += 3) {\r\n            const byte1 = input[i];\r\n            const haveByte2 = i + 1 < input.length;\r\n            const byte2 = haveByte2 ? input[i + 1] : 0;\r\n            const haveByte3 = i + 2 < input.length;\r\n            const byte3 = haveByte3 ? input[i + 2] : 0;\r\n            const outByte1 = byte1 >> 2;\r\n            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            let outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param input A string to encode.\r\n     * @param webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray$1(input), webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param input to decode.\r\n     * @param webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return string representing the decoded value.\r\n     */\r\n    decodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param input Input to decode.\r\n     * @param webSafe True if we should use the web-safe alphabet.\r\n     * @return bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray(input, webSafe) {\r\n        this.init_();\r\n        const charToByteMap = webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length;) {\r\n            const byte1 = charToByteMap[input.charAt(i++)];\r\n            const haveByte2 = i < input.length;\r\n            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            const haveByte3 = i < input.length;\r\n            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            const haveByte4 = i < input.length;\r\n            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw new DecodeBase64StringError();\r\n            }\r\n            const outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 !== 64) {\r\n                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 !== 64) {\r\n                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_() {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (let i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * An error encountered while decoding base64 string.\r\n */\r\nclass DecodeBase64StringError extends Error {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = 'DecodeBase64StringError';\r\n    }\r\n}\r\n/**\r\n * URL-safe base64 encoding\r\n */\r\nconst base64Encode = function (str) {\r\n    const utf8Bytes = stringToByteArray$1(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 encoding (without \".\" padding in the end).\r\n * e.g. Used in JSON Web Token (JWT) parts.\r\n */\r\nconst base64urlEncodeWithoutPadding = function (str) {\r\n    // Use base64url encoding and remove padding in the end (dot characters).\r\n    return base64Encode(str).replace(/\\./g, '');\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */\r\nconst base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n *\r\n * Note: we don't merge __proto__ to prevent prototype pollution\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            const dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (const prop in source) {\r\n        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\r\n        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\nfunction isValidKey(key) {\r\n    return key !== '__proto__';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Polyfill for `globalThis` object.\r\n * @returns the `globalThis` object for the given environment.\r\n * @public\r\n */\r\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    throw new Error('Unable to locate global object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst getDefaultsFromGlobal = () => getGlobal().__FIREBASE_DEFAULTS__;\r\n/**\r\n * Attempt to read defaults from a JSON string provided to\r\n * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in\r\n * process(.)env(.)__FIREBASE_DEFAULTS_PATH__\r\n * The dots are in parens because certain compilers (Vite?) cannot\r\n * handle seeing that variable in comments.\r\n * See https://github.com/firebase/firebase-js-sdk/issues/6838\r\n */\r\nconst getDefaultsFromEnvVariable = () => {\r\n    if (typeof process === 'undefined' || typeof process.env === 'undefined') {\r\n        return;\r\n    }\r\n    const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\r\n    if (defaultsJsonString) {\r\n        return JSON.parse(defaultsJsonString);\r\n    }\r\n};\r\nconst getDefaultsFromCookie = () => {\r\n    if (typeof document === 'undefined') {\r\n        return;\r\n    }\r\n    let match;\r\n    try {\r\n        match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\r\n    }\r\n    catch (e) {\r\n        // Some environments such as Angular Universal SSR have a\r\n        // `document` object but error on accessing `document.cookie`.\r\n        return;\r\n    }\r\n    const decoded = match && base64Decode(match[1]);\r\n    return decoded && JSON.parse(decoded);\r\n};\r\n/**\r\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\r\n * (1) if such an object exists as a property of `globalThis`\r\n * (2) if such an object was provided on a shell environment variable\r\n * (3) if such an object exists in a cookie\r\n * @public\r\n */\r\nconst getDefaults = () => {\r\n    try {\r\n        return (getDefaultsFromGlobal() ||\r\n            getDefaultsFromEnvVariable() ||\r\n            getDefaultsFromCookie());\r\n    }\r\n    catch (e) {\r\n        /**\r\n         * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\r\n         * to any environment case we have not accounted for. Log to\r\n         * info instead of swallowing so we can find these unknown cases\r\n         * and add paths for them if needed.\r\n         */\r\n        console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\r\n        return;\r\n    }\r\n};\r\n/**\r\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\r\n * for the given product.\r\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\r\n * @public\r\n */\r\nconst getDefaultEmulatorHost = (productName) => { var _a, _b; return (_b = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.emulatorHosts) === null || _b === void 0 ? void 0 : _b[productName]; };\r\n/**\r\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\r\n * for the given product.\r\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\r\n * @public\r\n */\r\nconst getDefaultEmulatorHostnameAndPort = (productName) => {\r\n    const host = getDefaultEmulatorHost(productName);\r\n    if (!host) {\r\n        return undefined;\r\n    }\r\n    const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\r\n    if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\r\n        throw new Error(`Invalid host ${host} with no separate hostname and port!`);\r\n    }\r\n    // eslint-disable-next-line no-restricted-globals\r\n    const port = parseInt(host.substring(separatorIndex + 1), 10);\r\n    if (host[0] === '[') {\r\n        // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\r\n        return [host.substring(1, separatorIndex - 1), port];\r\n    }\r\n    else {\r\n        return [host.substring(0, separatorIndex), port];\r\n    }\r\n};\r\n/**\r\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\r\n * @public\r\n */\r\nconst getDefaultAppConfig = () => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.config; };\r\n/**\r\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\r\n * prefixed by \"_\")\r\n * @public\r\n */\r\nconst getExperimentalSetting = (name) => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a[`_${name}`]; };\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Deferred {\r\n    constructor() {\r\n        this.reject = () => { };\r\n        this.resolve = () => { };\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     */\r\n    wrapCallback(callback) {\r\n        return (error, value) => {\r\n            if (error) {\r\n                this.reject(error);\r\n            }\r\n            else {\r\n                this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                this.promise.catch(() => { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createMockUserToken(token, projectId) {\r\n    if (token.uid) {\r\n        throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\r\n    }\r\n    // Unsecured JWTs use \"none\" as the algorithm.\r\n    const header = {\r\n        alg: 'none',\r\n        type: 'JWT'\r\n    };\r\n    const project = projectId || 'demo-project';\r\n    const iat = token.iat || 0;\r\n    const sub = token.sub || token.user_id;\r\n    if (!sub) {\r\n        throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\r\n    }\r\n    const payload = Object.assign({ \r\n        // Set all required fields to decent defaults\r\n        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {\r\n            sign_in_provider: 'custom',\r\n            identities: {}\r\n        } }, token);\r\n    // Unsecured JWTs use the empty string as a signature.\r\n    const signature = '';\r\n    return [\r\n        base64urlEncodeWithoutPadding(JSON.stringify(header)),\r\n        base64urlEncodeWithoutPadding(JSON.stringify(payload)),\r\n        signature\r\n    ].join('.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return user agent string\r\n */\r\nfunction getUA() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\r\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\r\n * wait for a callback.\r\n */\r\nfunction isMobileCordova() {\r\n    return (typeof window !== 'undefined' &&\r\n        // @ts-ignore Setting up an broadly applicable index signature for Window\r\n        // just to deal with this case would probably be a bad idea.\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n}\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return true if Node.js environment is detected or specified.\r\n */\r\n// Node detection logic from: https://github.com/iliakan/detect-node/\r\nfunction isNode() {\r\n    var _a;\r\n    const forceEnvironment = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.forceEnvironment;\r\n    if (forceEnvironment === 'node') {\r\n        return true;\r\n    }\r\n    else if (forceEnvironment === 'browser') {\r\n        return false;\r\n    }\r\n    try {\r\n        return (Object.prototype.toString.call(global.process) === '[object process]');\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Detect Browser Environment\r\n */\r\nfunction isBrowser() {\r\n    return typeof self === 'object' && self.self === self;\r\n}\r\nfunction isBrowserExtension() {\r\n    const runtime = typeof chrome === 'object'\r\n        ? chrome.runtime\r\n        : typeof browser === 'object'\r\n            ? browser.runtime\r\n            : undefined;\r\n    return typeof runtime === 'object' && runtime.id !== undefined;\r\n}\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return true if ReactNative environment is detected.\r\n */\r\nfunction isReactNative() {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n}\r\n/** Detects Electron apps. */\r\nfunction isElectron() {\r\n    return getUA().indexOf('Electron/') >= 0;\r\n}\r\n/** Detects Internet Explorer. */\r\nfunction isIE() {\r\n    const ua = getUA();\r\n    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\r\n}\r\n/** Detects Universal Windows Platform apps. */\r\nfunction isUWP() {\r\n    return getUA().indexOf('MSAppHost/') >= 0;\r\n}\r\n/**\r\n * Detect whether the current SDK build is the Node version.\r\n *\r\n * @return true if it's the Node SDK build.\r\n */\r\nfunction isNodeSdk() {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n}\r\n/** Returns true if we are running in Safari. */\r\nfunction isSafari() {\r\n    return (!isNode() &&\r\n        navigator.userAgent.includes('Safari') &&\r\n        !navigator.userAgent.includes('Chrome'));\r\n}\r\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\r\nfunction isIndexedDBAvailable() {\r\n    try {\r\n        return typeof indexedDB === 'object';\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */\r\nfunction validateIndexedDBOpenable() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            let preExist = true;\r\n            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';\r\n            const request = self.indexedDB.open(DB_CHECK_NAME);\r\n            request.onsuccess = () => {\r\n                request.result.close();\r\n                // delete database only when it doesn't pre-exist\r\n                if (!preExist) {\r\n                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);\r\n                }\r\n                resolve(true);\r\n            };\r\n            request.onupgradeneeded = () => {\r\n                preExist = false;\r\n            };\r\n            request.onerror = () => {\r\n                var _a;\r\n                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */\r\nfunction areCookiesEnabled() {\r\n    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // Typescript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */\r\nconst ERROR_NAME = 'FirebaseError';\r\n// Based on code from:\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\nclass FirebaseError extends Error {\r\n    constructor(\r\n    /** The error code for this error. */\r\n    code, message, \r\n    /** Custom data for this error. */\r\n    customData) {\r\n        super(message);\r\n        this.code = code;\r\n        this.customData = customData;\r\n        /** The custom name for all FirebaseErrors. */\r\n        this.name = ERROR_NAME;\r\n        // Fix For ES5\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, FirebaseError.prototype);\r\n        // Maintains proper stack trace for where our error was thrown.\r\n        // Only available on V8.\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n    }\r\n}\r\nclass ErrorFactory {\r\n    constructor(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n    }\r\n    create(code, ...data) {\r\n        const customData = data[0] || {};\r\n        const fullCode = `${this.service}/${code}`;\r\n        const template = this.errors[code];\r\n        const message = template ? replaceTemplate(template, customData) : 'Error';\r\n        // Service Name: Error message (service/code).\r\n        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\r\n        const error = new FirebaseError(fullCode, fullMessage, customData);\r\n        return error;\r\n    }\r\n}\r\nfunction replaceTemplate(template, data) {\r\n    return template.replace(PATTERN, (_, key) => {\r\n        const value = data[key];\r\n        return value != null ? String(value) : `<${key}?>`;\r\n    });\r\n}\r\nconst PATTERN = /\\{\\$([^}]+)}/g;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst decode = function (token) {\r\n    let header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        const parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header,\r\n        claims,\r\n        data,\r\n        signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidTimestamp = function (token) {\r\n    const claims = decode(token).claims;\r\n    const now = Math.floor(new Date().getTime() / 1000);\r\n    let validSince = 0, validUntil = 0;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (!!now &&\r\n        !!validSince &&\r\n        !!validUntil &&\r\n        now >= validSince &&\r\n        now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst issuedAtTime = function (token) {\r\n    const claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidFormat = function (token) {\r\n    const decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isAdmin = function (token) {\r\n    const claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction contains(obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\nfunction safeGet(obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\nfunction isEmpty(obj) {\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction map(obj, fn, contextObj) {\r\n    const res = {};\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            res[key] = fn.call(contextObj, obj[key], key, obj);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */\r\nfunction deepEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    const aKeys = Object.keys(a);\r\n    const bKeys = Object.keys(b);\r\n    for (const k of aKeys) {\r\n        if (!bKeys.includes(k)) {\r\n            return false;\r\n        }\r\n        const aProp = a[k];\r\n        const bProp = b[k];\r\n        if (isObject(aProp) && isObject(bProp)) {\r\n            if (!deepEqual(aProp, bProp)) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (aProp !== bProp) {\r\n            return false;\r\n        }\r\n    }\r\n    for (const k of bKeys) {\r\n        if (!aKeys.includes(k)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isObject(thing) {\r\n    return thing !== null && typeof thing === 'object';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Rejects if the given promise doesn't resolve in timeInMS milliseconds.\r\n * @internal\r\n */\r\nfunction promiseWithTimeout(promise, timeInMS = 2000) {\r\n    const deferredPromise = new Deferred();\r\n    setTimeout(() => deferredPromise.reject('timeout!'), timeInMS);\r\n    promise.then(deferredPromise.resolve, deferredPromise.reject);\r\n    return deferredPromise.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\r\n * params object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n */\r\nfunction querystring(querystringParams) {\r\n    const params = [];\r\n    for (const [key, value] of Object.entries(querystringParams)) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(arrayVal => {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    }\r\n    return params.length ? '&' + params.join('&') : '';\r\n}\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\r\n * (e.g. {arg: 'val', arg2: 'val2'})\r\n */\r\nfunction querystringDecode(querystring) {\r\n    const obj = {};\r\n    const tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(token => {\r\n        if (token) {\r\n            const [key, value] = token.split('=');\r\n            obj[decodeURIComponent(key)] = decodeURIComponent(value);\r\n        }\r\n    });\r\n    return obj;\r\n}\r\n/**\r\n * Extract the query string part of a URL, including the leading question mark (if present).\r\n */\r\nfunction extractQuerystring(url) {\r\n    const queryStart = url.indexOf('?');\r\n    if (!queryStart) {\r\n        return '';\r\n    }\r\n    const fragmentStart = url.indexOf('#', queryStart);\r\n    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */\r\nclass Sha1 {\r\n    constructor() {\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @private\r\n         */\r\n        this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @private\r\n         */\r\n        this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @private\r\n         */\r\n        this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @private\r\n         */\r\n        this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.total_ = 0;\r\n        this.blockSize = 512 / 8;\r\n        this.pad_[0] = 128;\r\n        for (let i = 1; i < this.blockSize; ++i) {\r\n            this.pad_[i] = 0;\r\n        }\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    }\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param buf Block to compress.\r\n     * @param offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    compress_(buf, offset) {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        const W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (let i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(offset) << 24) |\r\n                        (buf.charCodeAt(offset + 1) << 16) |\r\n                        (buf.charCodeAt(offset + 2) << 8) |\r\n                        buf.charCodeAt(offset + 3);\r\n                offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[offset] << 24) |\r\n                        (buf[offset + 1] << 16) |\r\n                        (buf[offset + 2] << 8) |\r\n                        buf[offset + 3];\r\n                offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (let i = 16; i < 80; i++) {\r\n            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        let a = this.chain_[0];\r\n        let b = this.chain_[1];\r\n        let c = this.chain_[2];\r\n        let d = this.chain_[3];\r\n        let e = this.chain_[4];\r\n        let f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (let i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    }\r\n    update(bytes, length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (length === undefined) {\r\n            length = bytes.length;\r\n        }\r\n        const lengthMinusBlock = length - this.blockSize;\r\n        let n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        const buf = this.buf_;\r\n        let inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf === 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += length;\r\n    }\r\n    /** @override */\r\n    digest() {\r\n        const digest = [];\r\n        let totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (let i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        let n = 0;\r\n        for (let i = 0; i < 5; i++) {\r\n            for (let j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    }\r\n}\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    const proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nclass ObserverProxy {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    constructor(executor, onNoObservers) {\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(() => {\r\n            executor(this);\r\n        })\r\n            .catch(e => {\r\n            this.error(e);\r\n        });\r\n    }\r\n    next(value) {\r\n        this.forEachObserver((observer) => {\r\n            observer.next(value);\r\n        });\r\n    }\r\n    error(error) {\r\n        this.forEachObserver((observer) => {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    }\r\n    complete() {\r\n        this.forEachObserver((observer) => {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    }\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    subscribe(nextOrObserver, error, complete) {\r\n        let observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, [\r\n            'next',\r\n            'error',\r\n            'complete'\r\n        ])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error,\r\n                complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        const unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(() => {\r\n                try {\r\n                    if (this.finalError) {\r\n                        observer.error(this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    }\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    unsubscribeOne(i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    }\r\n    forEachObserver(fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (let i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    }\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    sendOne(i, fn) {\r\n        // Execute the callback asynchronously\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            if (this.observers !== undefined && this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    close(err) {\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            this.observers = undefined;\r\n            this.onNoObservers = undefined;\r\n        });\r\n    }\r\n}\r\n/** Turn synchronous function into one called asynchronously. */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(fn, onError) {\r\n    return (...args) => {\r\n        Promise.resolve(true)\r\n            .then(() => {\r\n            fn(...args);\r\n        })\r\n            .catch((error) => {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (const method of methods) {\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param fnName The function name\r\n * @param minCount The minimum number of arguments to allow for the function call\r\n * @param maxCount The maximum number of argument to allow for the function call\r\n * @param argCount The actual number of arguments provided.\r\n */\r\nconst validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    let argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        const error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param fnName The function name\r\n * @param argName The name of the argument\r\n * @return The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argName) {\r\n    return `${fnName} failed: ${argName} argument `;\r\n}\r\n/**\r\n * @param fnName\r\n * @param argumentNumber\r\n * @param namespace\r\n * @param optional\r\n */\r\nfunction validateNamespace(fnName, namespace, optional) {\r\n    if (optional && !namespace) {\r\n        return;\r\n    }\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentName, \r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ncallback, optional) {\r\n    if (optional && !callback) {\r\n        return;\r\n    }\r\n    if (typeof callback !== 'function') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');\r\n    }\r\n}\r\nfunction validateContextObject(fnName, argumentName, context, optional) {\r\n    if (optional && !context) {\r\n        return;\r\n    }\r\n    if (typeof context !== 'object' || context === null) {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nconst stringToByteArray = function (str) {\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            const high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nconst stringLength = function (str) {\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Copied from https://stackoverflow.com/a/2117523\r\n * Generates a new uuid.\r\n * @public\r\n */\r\nconst uuidv4 = function () {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\r\n        const r = (Math.random() * 16) | 0, v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The amount of milliseconds to exponentially increase.\r\n */\r\nconst DEFAULT_INTERVAL_MILLIS = 1000;\r\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */\r\nconst DEFAULT_BACKOFF_FACTOR = 2;\r\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\r\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst RANDOM_FACTOR = 0.5;\r\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */\r\nfunction calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {\r\n    // Calculates an exponentially increasing value.\r\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\r\n    // and count to restore state.\r\n    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\r\n    // A random \"fuzz\" to avoid waves of retries.\r\n    // Deviation: randomFactor is required.\r\n    const randomWait = Math.round(\r\n    // A fraction of the backoff value to add/subtract.\r\n    // Deviation: changes multiplication order to improve readability.\r\n    RANDOM_FACTOR *\r\n        currBaseValue *\r\n        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\r\n        // if we add or subtract.\r\n        (Math.random() - 0.5) *\r\n        2);\r\n    // Limits backoff to max to avoid effectively permanent backoff.\r\n    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provide English ordinal letters after a number\r\n */\r\nfunction ordinal(i) {\r\n    if (!Number.isFinite(i)) {\r\n        return `${i}`;\r\n    }\r\n    return i + indicator(i);\r\n}\r\nfunction indicator(i) {\r\n    i = Math.abs(i);\r\n    const cent = i % 100;\r\n    if (cent >= 10 && cent <= 20) {\r\n        return 'th';\r\n    }\r\n    const dec = i % 10;\r\n    if (dec === 1) {\r\n        return 'st';\r\n    }\r\n    if (dec === 2) {\r\n        return 'nd';\r\n    }\r\n    if (dec === 3) {\r\n        return 'rd';\r\n    }\r\n    return 'th';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getModularInstance(service) {\r\n    if (service && service._delegate) {\r\n        return service._delegate;\r\n    }\r\n    else {\r\n        return service;\r\n    }\r\n}\n\nexport { CONSTANTS, DecodeBase64StringError, Deferred, ErrorFactory, FirebaseError, MAX_VALUE_MILLIS, RANDOM_FACTOR, Sha1, areCookiesEnabled, assert, assertionError, async, base64, base64Decode, base64Encode, base64urlEncodeWithoutPadding, calculateBackoffMillis, contains, createMockUserToken, createSubscribe, decode, deepCopy, deepEqual, deepExtend, errorPrefix, extractQuerystring, getDefaultAppConfig, getDefaultEmulatorHost, getDefaultEmulatorHostnameAndPort, getDefaults, getExperimentalSetting, getGlobal, getModularInstance, getUA, isAdmin, isBrowser, isBrowserExtension, isElectron, isEmpty, isIE, isIndexedDBAvailable, isMobileCordova, isNode, isNodeSdk, isReactNative, isSafari, isUWP, isValidFormat, isValidTimestamp, issuedAtTime, jsonEval, map, ordinal, promiseWithTimeout, querystring, querystringDecode, safeGet, stringLength, stringToByteArray, stringify, uuidv4, validateArgCount, validateCallback, validateContextObject, validateIndexedDBOpenable, validateNamespace };\n//# sourceMappingURL=index.esm2017.js.map\n","import { _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, isNode, createMockUserToken, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\r\n/**\r\n * Domain name for firebase storage.\r\n */\r\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\r\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\r\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\r\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\r\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\r\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\r\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\r\n/**\r\n * 1 second\r\n */\r\nconst DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\r\nclass StorageError extends FirebaseError {\r\n    /**\r\n     * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\r\n     *  added to the end of the message.\r\n     * @param message  - Error message.\r\n     * @param status_ - Corresponding HTTP Status Code\r\n     */\r\n    constructor(code, message, status_ = 0) {\r\n        super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\r\n        this.status_ = status_;\r\n        /**\r\n         * Stores custom error data unique to the `StorageError`.\r\n         */\r\n        this.customData = { serverResponse: null };\r\n        this._baseMessage = this.message;\r\n        // Without this, `instanceof StorageError`, in tests for example,\r\n        // returns false.\r\n        Object.setPrototypeOf(this, StorageError.prototype);\r\n    }\r\n    get status() {\r\n        return this.status_;\r\n    }\r\n    set status(status) {\r\n        this.status_ = status;\r\n    }\r\n    /**\r\n     * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\r\n     */\r\n    _codeEquals(code) {\r\n        return prependCode(code) === this.code;\r\n    }\r\n    /**\r\n     * Optional response message that was added by the server.\r\n     */\r\n    get serverResponse() {\r\n        return this.customData.serverResponse;\r\n    }\r\n    set serverResponse(serverResponse) {\r\n        this.customData.serverResponse = serverResponse;\r\n        if (this.customData.serverResponse) {\r\n            this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\r\n        }\r\n        else {\r\n            this.message = this._baseMessage;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @public\r\n * Error codes that can be attached to `StorageError` objects.\r\n */\r\nvar StorageErrorCode;\r\n(function (StorageErrorCode) {\r\n    // Shared between all platforms\r\n    StorageErrorCode[\"UNKNOWN\"] = \"unknown\";\r\n    StorageErrorCode[\"OBJECT_NOT_FOUND\"] = \"object-not-found\";\r\n    StorageErrorCode[\"BUCKET_NOT_FOUND\"] = \"bucket-not-found\";\r\n    StorageErrorCode[\"PROJECT_NOT_FOUND\"] = \"project-not-found\";\r\n    StorageErrorCode[\"QUOTA_EXCEEDED\"] = \"quota-exceeded\";\r\n    StorageErrorCode[\"UNAUTHENTICATED\"] = \"unauthenticated\";\r\n    StorageErrorCode[\"UNAUTHORIZED\"] = \"unauthorized\";\r\n    StorageErrorCode[\"UNAUTHORIZED_APP\"] = \"unauthorized-app\";\r\n    StorageErrorCode[\"RETRY_LIMIT_EXCEEDED\"] = \"retry-limit-exceeded\";\r\n    StorageErrorCode[\"INVALID_CHECKSUM\"] = \"invalid-checksum\";\r\n    StorageErrorCode[\"CANCELED\"] = \"canceled\";\r\n    // JS specific\r\n    StorageErrorCode[\"INVALID_EVENT_NAME\"] = \"invalid-event-name\";\r\n    StorageErrorCode[\"INVALID_URL\"] = \"invalid-url\";\r\n    StorageErrorCode[\"INVALID_DEFAULT_BUCKET\"] = \"invalid-default-bucket\";\r\n    StorageErrorCode[\"NO_DEFAULT_BUCKET\"] = \"no-default-bucket\";\r\n    StorageErrorCode[\"CANNOT_SLICE_BLOB\"] = \"cannot-slice-blob\";\r\n    StorageErrorCode[\"SERVER_FILE_WRONG_SIZE\"] = \"server-file-wrong-size\";\r\n    StorageErrorCode[\"NO_DOWNLOAD_URL\"] = \"no-download-url\";\r\n    StorageErrorCode[\"INVALID_ARGUMENT\"] = \"invalid-argument\";\r\n    StorageErrorCode[\"INVALID_ARGUMENT_COUNT\"] = \"invalid-argument-count\";\r\n    StorageErrorCode[\"APP_DELETED\"] = \"app-deleted\";\r\n    StorageErrorCode[\"INVALID_ROOT_OPERATION\"] = \"invalid-root-operation\";\r\n    StorageErrorCode[\"INVALID_FORMAT\"] = \"invalid-format\";\r\n    StorageErrorCode[\"INTERNAL_ERROR\"] = \"internal-error\";\r\n    StorageErrorCode[\"UNSUPPORTED_ENVIRONMENT\"] = \"unsupported-environment\";\r\n})(StorageErrorCode || (StorageErrorCode = {}));\r\nfunction prependCode(code) {\r\n    return 'storage/' + code;\r\n}\r\nfunction unknown() {\r\n    const message = 'An unknown error occurred, please check the error payload for ' +\r\n        'server response.';\r\n    return new StorageError(StorageErrorCode.UNKNOWN, message);\r\n}\r\nfunction objectNotFound(path) {\r\n    return new StorageError(StorageErrorCode.OBJECT_NOT_FOUND, \"Object '\" + path + \"' does not exist.\");\r\n}\r\nfunction quotaExceeded(bucket) {\r\n    return new StorageError(StorageErrorCode.QUOTA_EXCEEDED, \"Quota for bucket '\" +\r\n        bucket +\r\n        \"' exceeded, please view quota on \" +\r\n        'https://firebase.google.com/pricing/.');\r\n}\r\nfunction unauthenticated() {\r\n    const message = 'User is not authenticated, please authenticate using Firebase ' +\r\n        'Authentication and try again.';\r\n    return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\r\n}\r\nfunction unauthorizedApp() {\r\n    return new StorageError(StorageErrorCode.UNAUTHORIZED_APP, 'This app does not have permission to access Firebase Storage on this project.');\r\n}\r\nfunction unauthorized(path) {\r\n    return new StorageError(StorageErrorCode.UNAUTHORIZED, \"User does not have permission to access '\" + path + \"'.\");\r\n}\r\nfunction retryLimitExceeded() {\r\n    return new StorageError(StorageErrorCode.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');\r\n}\r\nfunction canceled() {\r\n    return new StorageError(StorageErrorCode.CANCELED, 'User canceled the upload/download.');\r\n}\r\nfunction invalidUrl(url) {\r\n    return new StorageError(StorageErrorCode.INVALID_URL, \"Invalid URL '\" + url + \"'.\");\r\n}\r\nfunction invalidDefaultBucket(bucket) {\r\n    return new StorageError(StorageErrorCode.INVALID_DEFAULT_BUCKET, \"Invalid default bucket '\" + bucket + \"'.\");\r\n}\r\nfunction noDefaultBucket() {\r\n    return new StorageError(StorageErrorCode.NO_DEFAULT_BUCKET, 'No default bucket ' +\r\n        \"found. Did you set the '\" +\r\n        CONFIG_STORAGE_BUCKET_KEY +\r\n        \"' property when initializing the app?\");\r\n}\r\nfunction cannotSliceBlob() {\r\n    return new StorageError(StorageErrorCode.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');\r\n}\r\nfunction serverFileWrongSize() {\r\n    return new StorageError(StorageErrorCode.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');\r\n}\r\nfunction noDownloadURL() {\r\n    return new StorageError(StorageErrorCode.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');\r\n}\r\nfunction missingPolyFill(polyFill) {\r\n    return new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction invalidArgument(message) {\r\n    return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\r\n}\r\nfunction appDeleted() {\r\n    return new StorageError(StorageErrorCode.APP_DELETED, 'The Firebase app was deleted.');\r\n}\r\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\r\nfunction invalidRootOperation(name) {\r\n    return new StorageError(StorageErrorCode.INVALID_ROOT_OPERATION, \"The operation '\" +\r\n        name +\r\n        \"' cannot be performed on a root reference, create a non-root \" +\r\n        \"reference using child, such as .child('file.png').\");\r\n}\r\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\r\nfunction invalidFormat(format, message) {\r\n    return new StorageError(StorageErrorCode.INVALID_FORMAT, \"String does not match format '\" + format + \"': \" + message);\r\n}\r\n/**\r\n * @param message - A message describing the internal error.\r\n */\r\nfunction internalError(message) {\r\n    throw new StorageError(StorageErrorCode.INTERNAL_ERROR, 'Internal error: ' + message);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\r\nclass Location {\r\n    constructor(bucket, path) {\r\n        this.bucket = bucket;\r\n        this.path_ = path;\r\n    }\r\n    get path() {\r\n        return this.path_;\r\n    }\r\n    get isRoot() {\r\n        return this.path.length === 0;\r\n    }\r\n    fullServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\r\n    }\r\n    bucketOnlyServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o';\r\n    }\r\n    static makeFromBucketSpec(bucketString, host) {\r\n        let bucketLocation;\r\n        try {\r\n            bucketLocation = Location.makeFromUrl(bucketString, host);\r\n        }\r\n        catch (e) {\r\n            // Not valid URL, use as-is. This lets you put bare bucket names in\r\n            // config.\r\n            return new Location(bucketString, '');\r\n        }\r\n        if (bucketLocation.path === '') {\r\n            return bucketLocation;\r\n        }\r\n        else {\r\n            throw invalidDefaultBucket(bucketString);\r\n        }\r\n    }\r\n    static makeFromUrl(url, host) {\r\n        let location = null;\r\n        const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\r\n        function gsModify(loc) {\r\n            if (loc.path.charAt(loc.path.length - 1) === '/') {\r\n                loc.path_ = loc.path_.slice(0, -1);\r\n            }\r\n        }\r\n        const gsPath = '(/(.*))?$';\r\n        const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\r\n        const gsIndices = { bucket: 1, path: 3 };\r\n        function httpModify(loc) {\r\n            loc.path_ = decodeURIComponent(loc.path);\r\n        }\r\n        const version = 'v[A-Za-z0-9_]+';\r\n        const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\r\n        const firebaseStoragePath = '(/([^?#]*).*)?$';\r\n        const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\r\n        const firebaseStorageIndices = { bucket: 1, path: 3 };\r\n        const cloudStorageHost = host === DEFAULT_HOST\r\n            ? '(?:storage.googleapis.com|storage.cloud.google.com)'\r\n            : host;\r\n        const cloudStoragePath = '([^?#]*)';\r\n        const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\r\n        const cloudStorageIndices = { bucket: 1, path: 2 };\r\n        const groups = [\r\n            { regex: gsRegex, indices: gsIndices, postModify: gsModify },\r\n            {\r\n                regex: firebaseStorageRegExp,\r\n                indices: firebaseStorageIndices,\r\n                postModify: httpModify\r\n            },\r\n            {\r\n                regex: cloudStorageRegExp,\r\n                indices: cloudStorageIndices,\r\n                postModify: httpModify\r\n            }\r\n        ];\r\n        for (let i = 0; i < groups.length; i++) {\r\n            const group = groups[i];\r\n            const captures = group.regex.exec(url);\r\n            if (captures) {\r\n                const bucketValue = captures[group.indices.bucket];\r\n                let pathValue = captures[group.indices.path];\r\n                if (!pathValue) {\r\n                    pathValue = '';\r\n                }\r\n                location = new Location(bucketValue, pathValue);\r\n                group.postModify(location);\r\n                break;\r\n            }\r\n        }\r\n        if (location == null) {\r\n            throw invalidUrl(url);\r\n        }\r\n        return location;\r\n    }\r\n}\n\n/**\r\n * A request whose promise always fails.\r\n */\r\nclass FailRequest {\r\n    constructor(error) {\r\n        this.promise_ = Promise.reject(error);\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(_appDelete = false) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Accepts a callback for an action to perform (`doRequest`),\r\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\r\n * The callback sent to start requires an argument to call (`onRequestComplete`).\r\n * When `start` calls `doRequest`, it passes a callback for when the request has\r\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\r\n * another call to `doRequest` and the above loop continues until the timeout\r\n * is hit, or a successful response occurs.\r\n * @description\r\n * @param doRequest Callback to perform request\r\n * @param backoffCompleteCb Callback to call when backoff has been completed\r\n */\r\nfunction start(doRequest, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nbackoffCompleteCb, timeout) {\r\n    // TODO(andysoto): make this code cleaner (probably refactor into an actual\r\n    // type instead of a bunch of functions with state shared in the closure)\r\n    let waitSeconds = 1;\r\n    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\r\n    // TODO: find a way to exclude Node type definition for storage because storage only works in browser\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let retryTimeoutId = null;\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let globalTimeoutId = null;\r\n    let hitTimeout = false;\r\n    let cancelState = 0;\r\n    function canceled() {\r\n        return cancelState === 2;\r\n    }\r\n    let triggeredCallback = false;\r\n    function triggerCallback(...args) {\r\n        if (!triggeredCallback) {\r\n            triggeredCallback = true;\r\n            backoffCompleteCb.apply(null, args);\r\n        }\r\n    }\r\n    function callWithDelay(millis) {\r\n        retryTimeoutId = setTimeout(() => {\r\n            retryTimeoutId = null;\r\n            doRequest(responseHandler, canceled());\r\n        }, millis);\r\n    }\r\n    function clearGlobalTimeout() {\r\n        if (globalTimeoutId) {\r\n            clearTimeout(globalTimeoutId);\r\n        }\r\n    }\r\n    function responseHandler(success, ...args) {\r\n        if (triggeredCallback) {\r\n            clearGlobalTimeout();\r\n            return;\r\n        }\r\n        if (success) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        const mustStop = canceled() || hitTimeout;\r\n        if (mustStop) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        if (waitSeconds < 64) {\r\n            /* TODO(andysoto): don't back off so quickly if we know we're offline. */\r\n            waitSeconds *= 2;\r\n        }\r\n        let waitMillis;\r\n        if (cancelState === 1) {\r\n            cancelState = 2;\r\n            waitMillis = 0;\r\n        }\r\n        else {\r\n            waitMillis = (waitSeconds + Math.random()) * 1000;\r\n        }\r\n        callWithDelay(waitMillis);\r\n    }\r\n    let stopped = false;\r\n    function stop(wasTimeout) {\r\n        if (stopped) {\r\n            return;\r\n        }\r\n        stopped = true;\r\n        clearGlobalTimeout();\r\n        if (triggeredCallback) {\r\n            return;\r\n        }\r\n        if (retryTimeoutId !== null) {\r\n            if (!wasTimeout) {\r\n                cancelState = 2;\r\n            }\r\n            clearTimeout(retryTimeoutId);\r\n            callWithDelay(0);\r\n        }\r\n        else {\r\n            if (!wasTimeout) {\r\n                cancelState = 1;\r\n            }\r\n        }\r\n    }\r\n    callWithDelay(0);\r\n    globalTimeoutId = setTimeout(() => {\r\n        hitTimeout = true;\r\n        stop(true);\r\n    }, timeout);\r\n    return stop;\r\n}\r\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\r\nfunction stop(id) {\r\n    id(false);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isJustDef(p) {\r\n    return p !== void 0;\r\n}\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction isFunction(p) {\r\n    return typeof p === 'function';\r\n}\r\nfunction isNonArrayObject(p) {\r\n    return typeof p === 'object' && !Array.isArray(p);\r\n}\r\nfunction isString(p) {\r\n    return typeof p === 'string' || p instanceof String;\r\n}\r\nfunction isNativeBlob(p) {\r\n    return isNativeBlobDefined() && p instanceof Blob;\r\n}\r\nfunction isNativeBlobDefined() {\r\n    // Note: The `isNode()` check can be removed when `node-fetch` adds native Blob support\r\n    // PR: https://github.com/node-fetch/node-fetch/pull/1664\r\n    return typeof Blob !== 'undefined' && !isNode();\r\n}\r\nfunction validateNumber(argument, minValue, maxValue, value) {\r\n    if (value < minValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\r\n    }\r\n    if (value > maxValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction makeUrl(urlPart, host, protocol) {\r\n    let origin = host;\r\n    if (protocol == null) {\r\n        origin = `https://${host}`;\r\n    }\r\n    return `${protocol}://${origin}/v0${urlPart}`;\r\n}\r\nfunction makeQueryString(params) {\r\n    const encode = encodeURIComponent;\r\n    let queryPart = '?';\r\n    for (const key in params) {\r\n        if (params.hasOwnProperty(key)) {\r\n            const nextPart = encode(key) + '=' + encode(params[key]);\r\n            queryPart = queryPart + nextPart + '&';\r\n        }\r\n    }\r\n    // Chop off the extra '&' or '?' on the end\r\n    queryPart = queryPart.slice(0, -1);\r\n    return queryPart;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\r\nvar ErrorCode;\r\n(function (ErrorCode) {\r\n    ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\r\n    ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\r\n    ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\r\n})(ErrorCode || (ErrorCode = {}));\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Checks the status code to see if the action should be retried.\r\n *\r\n * @param status Current HTTP status code returned by server.\r\n * @param additionalRetryCodes additional retry codes to check against\r\n */\r\nfunction isRetryStatusCode(status, additionalRetryCodes) {\r\n    // The codes for which to retry came from this page:\r\n    // https://cloud.google.com/storage/docs/exponential-backoff\r\n    const isFiveHundredCode = status >= 500 && status < 600;\r\n    const extraRetryCodes = [\r\n        // Request Timeout: web server didn't receive full request in time.\r\n        408,\r\n        // Too Many Requests: you're getting rate-limited, basically.\r\n        429\r\n    ];\r\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\r\n    const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\r\n    return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Handles network logic for all Storage Requests, including error reporting and\r\n * retries with backoff.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param - O the output type used by the rest of the SDK. The conversion\r\n * happens in the specified `callback_`.\r\n */\r\nclass NetworkRequest {\r\n    constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_, retry = true) {\r\n        this.url_ = url_;\r\n        this.method_ = method_;\r\n        this.headers_ = headers_;\r\n        this.body_ = body_;\r\n        this.successCodes_ = successCodes_;\r\n        this.additionalRetryCodes_ = additionalRetryCodes_;\r\n        this.callback_ = callback_;\r\n        this.errorCallback_ = errorCallback_;\r\n        this.timeout_ = timeout_;\r\n        this.progressCallback_ = progressCallback_;\r\n        this.connectionFactory_ = connectionFactory_;\r\n        this.retry = retry;\r\n        this.pendingConnection_ = null;\r\n        this.backoffId_ = null;\r\n        this.canceled_ = false;\r\n        this.appDelete_ = false;\r\n        this.promise_ = new Promise((resolve, reject) => {\r\n            this.resolve_ = resolve;\r\n            this.reject_ = reject;\r\n            this.start_();\r\n        });\r\n    }\r\n    /**\r\n     * Actually starts the retry loop.\r\n     */\r\n    start_() {\r\n        const doTheRequest = (backoffCallback, canceled) => {\r\n            if (canceled) {\r\n                backoffCallback(false, new RequestEndStatus(false, null, true));\r\n                return;\r\n            }\r\n            const connection = this.connectionFactory_();\r\n            this.pendingConnection_ = connection;\r\n            const progressListener = progressEvent => {\r\n                const loaded = progressEvent.loaded;\r\n                const total = progressEvent.lengthComputable ? progressEvent.total : -1;\r\n                if (this.progressCallback_ !== null) {\r\n                    this.progressCallback_(loaded, total);\r\n                }\r\n            };\r\n            if (this.progressCallback_ !== null) {\r\n                connection.addUploadProgressListener(progressListener);\r\n            }\r\n            // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            connection\r\n                .send(this.url_, this.method_, this.body_, this.headers_)\r\n                .then(() => {\r\n                if (this.progressCallback_ !== null) {\r\n                    connection.removeUploadProgressListener(progressListener);\r\n                }\r\n                this.pendingConnection_ = null;\r\n                const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\r\n                const status = connection.getStatus();\r\n                if (!hitServer ||\r\n                    (isRetryStatusCode(status, this.additionalRetryCodes_) &&\r\n                        this.retry)) {\r\n                    const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\r\n                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\r\n                    return;\r\n                }\r\n                const successCode = this.successCodes_.indexOf(status) !== -1;\r\n                backoffCallback(true, new RequestEndStatus(successCode, connection));\r\n            });\r\n        };\r\n        /**\r\n         * @param requestWentThrough - True if the request eventually went\r\n         *     through, false if it hit the retry limit or was canceled.\r\n         */\r\n        const backoffDone = (requestWentThrough, status) => {\r\n            const resolve = this.resolve_;\r\n            const reject = this.reject_;\r\n            const connection = status.connection;\r\n            if (status.wasSuccessCode) {\r\n                try {\r\n                    const result = this.callback_(connection, connection.getResponse());\r\n                    if (isJustDef(result)) {\r\n                        resolve(result);\r\n                    }\r\n                    else {\r\n                        resolve();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            }\r\n            else {\r\n                if (connection !== null) {\r\n                    const err = unknown();\r\n                    err.serverResponse = connection.getErrorText();\r\n                    if (this.errorCallback_) {\r\n                        reject(this.errorCallback_(connection, err));\r\n                    }\r\n                    else {\r\n                        reject(err);\r\n                    }\r\n                }\r\n                else {\r\n                    if (status.canceled) {\r\n                        const err = this.appDelete_ ? appDeleted() : canceled();\r\n                        reject(err);\r\n                    }\r\n                    else {\r\n                        const err = retryLimitExceeded();\r\n                        reject(err);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        if (this.canceled_) {\r\n            backoffDone(false, new RequestEndStatus(false, null, true));\r\n        }\r\n        else {\r\n            this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(appDelete) {\r\n        this.canceled_ = true;\r\n        this.appDelete_ = appDelete || false;\r\n        if (this.backoffId_ !== null) {\r\n            stop(this.backoffId_);\r\n        }\r\n        if (this.pendingConnection_ !== null) {\r\n            this.pendingConnection_.abort();\r\n        }\r\n    }\r\n}\r\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\r\nclass RequestEndStatus {\r\n    constructor(wasSuccessCode, connection, canceled) {\r\n        this.wasSuccessCode = wasSuccessCode;\r\n        this.connection = connection;\r\n        this.canceled = !!canceled;\r\n    }\r\n}\r\nfunction addAuthHeader_(headers, authToken) {\r\n    if (authToken !== null && authToken.length > 0) {\r\n        headers['Authorization'] = 'Firebase ' + authToken;\r\n    }\r\n}\r\nfunction addVersionHeader_(headers, firebaseVersion) {\r\n    headers['X-Firebase-Storage-Version'] =\r\n        'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\r\n}\r\nfunction addGmpidHeader_(headers, appId) {\r\n    if (appId) {\r\n        headers['X-Firebase-GMPID'] = appId;\r\n    }\r\n}\r\nfunction addAppCheckHeader_(headers, appCheckToken) {\r\n    if (appCheckToken !== null) {\r\n        headers['X-Firebase-AppCheck'] = appCheckToken;\r\n    }\r\n}\r\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion, retry = true) {\r\n    const queryPart = makeQueryString(requestInfo.urlParams);\r\n    const url = requestInfo.url + queryPart;\r\n    const headers = Object.assign({}, requestInfo.headers);\r\n    addGmpidHeader_(headers, appId);\r\n    addAuthHeader_(headers, authToken);\r\n    addVersionHeader_(headers, firebaseVersion);\r\n    addAppCheckHeader_(headers, appCheckToken);\r\n    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory, retry);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getBlobBuilder() {\r\n    if (typeof BlobBuilder !== 'undefined') {\r\n        return BlobBuilder;\r\n    }\r\n    else if (typeof WebKitBlobBuilder !== 'undefined') {\r\n        return WebKitBlobBuilder;\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\r\nfunction getBlob$1(...args) {\r\n    const BlobBuilder = getBlobBuilder();\r\n    if (BlobBuilder !== undefined) {\r\n        const bb = new BlobBuilder();\r\n        for (let i = 0; i < args.length; i++) {\r\n            bb.append(args[i]);\r\n        }\r\n        return bb.getBlob();\r\n    }\r\n    else {\r\n        if (isNativeBlobDefined()) {\r\n            return new Blob(args);\r\n        }\r\n        else {\r\n            throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, \"This browser doesn't seem to support creating Blobs\");\r\n        }\r\n    }\r\n}\r\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\r\nfunction sliceBlob(blob, start, end) {\r\n    if (blob.webkitSlice) {\r\n        return blob.webkitSlice(start, end);\r\n    }\r\n    else if (blob.mozSlice) {\r\n        return blob.mozSlice(start, end);\r\n    }\r\n    else if (blob.slice) {\r\n        return blob.slice(start, end);\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Converts a Base64 encoded string to a binary string. */\r\nfunction decodeBase64(encoded) {\r\n    if (typeof atob === 'undefined') {\r\n        throw missingPolyFill('base-64');\r\n    }\r\n    return atob(encoded);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\r\nconst StringFormat = {\r\n    /**\r\n     * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n     * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n     * sequence.\r\n     * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n     * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n     */\r\n    RAW: 'raw',\r\n    /**\r\n     * Indicates the string should be interpreted as base64-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64: 'base64',\r\n    /**\r\n     * Indicates the string should be interpreted as base64url-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64URL: 'base64url',\r\n    /**\r\n     * Indicates the string is a data URL, such as one obtained from\r\n     * canvas.toDataURL().\r\n     * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n     * becomes the byte sequence\r\n     * 69 a6 9a\r\n     * (the content-type \"application/octet-stream\" is also applied, but can\r\n     * be overridden in the metadata object).\r\n     */\r\n    DATA_URL: 'data_url'\r\n};\r\nclass StringData {\r\n    constructor(data, contentType) {\r\n        this.data = data;\r\n        this.contentType = contentType || null;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction dataFromString(format, stringData) {\r\n    switch (format) {\r\n        case StringFormat.RAW:\r\n            return new StringData(utf8Bytes_(stringData));\r\n        case StringFormat.BASE64:\r\n        case StringFormat.BASE64URL:\r\n            return new StringData(base64Bytes_(format, stringData));\r\n        case StringFormat.DATA_URL:\r\n            return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\r\n        // do nothing\r\n    }\r\n    // assert(false);\r\n    throw unknown();\r\n}\r\nfunction utf8Bytes_(value) {\r\n    const b = [];\r\n    for (let i = 0; i < value.length; i++) {\r\n        let c = value.charCodeAt(i);\r\n        if (c <= 127) {\r\n            b.push(c);\r\n        }\r\n        else {\r\n            if (c <= 2047) {\r\n                b.push(192 | (c >> 6), 128 | (c & 63));\r\n            }\r\n            else {\r\n                if ((c & 64512) === 55296) {\r\n                    // The start of a surrogate pair.\r\n                    const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\r\n                    if (!valid) {\r\n                        // The second surrogate wasn't there.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        const hi = c;\r\n                        const lo = value.charCodeAt(++i);\r\n                        c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\r\n                        b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n                else {\r\n                    if ((c & 64512) === 56320) {\r\n                        // Invalid low surrogate.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return new Uint8Array(b);\r\n}\r\nfunction percentEncodedBytes_(value) {\r\n    let decoded;\r\n    try {\r\n        decoded = decodeURIComponent(value);\r\n    }\r\n    catch (e) {\r\n        throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\r\n    }\r\n    return utf8Bytes_(decoded);\r\n}\r\nfunction base64Bytes_(format, value) {\r\n    switch (format) {\r\n        case StringFormat.BASE64: {\r\n            const hasMinus = value.indexOf('-') !== -1;\r\n            const hasUnder = value.indexOf('_') !== -1;\r\n            if (hasMinus || hasUnder) {\r\n                const invalidChar = hasMinus ? '-' : '_';\r\n                throw invalidFormat(format, \"Invalid character '\" +\r\n                    invalidChar +\r\n                    \"' found: is it base64url encoded?\");\r\n            }\r\n            break;\r\n        }\r\n        case StringFormat.BASE64URL: {\r\n            const hasPlus = value.indexOf('+') !== -1;\r\n            const hasSlash = value.indexOf('/') !== -1;\r\n            if (hasPlus || hasSlash) {\r\n                const invalidChar = hasPlus ? '+' : '/';\r\n                throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\r\n            }\r\n            value = value.replace(/-/g, '+').replace(/_/g, '/');\r\n            break;\r\n        }\r\n        // do nothing\r\n    }\r\n    let bytes;\r\n    try {\r\n        bytes = decodeBase64(value);\r\n    }\r\n    catch (e) {\r\n        if (e.message.includes('polyfill')) {\r\n            throw e;\r\n        }\r\n        throw invalidFormat(format, 'Invalid character found');\r\n    }\r\n    const array = new Uint8Array(bytes.length);\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        array[i] = bytes.charCodeAt(i);\r\n    }\r\n    return array;\r\n}\r\nclass DataURLParts {\r\n    constructor(dataURL) {\r\n        this.base64 = false;\r\n        this.contentType = null;\r\n        const matches = dataURL.match(/^data:([^,]+)?,/);\r\n        if (matches === null) {\r\n            throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\r\n        }\r\n        const middle = matches[1] || null;\r\n        if (middle != null) {\r\n            this.base64 = endsWith(middle, ';base64');\r\n            this.contentType = this.base64\r\n                ? middle.substring(0, middle.length - ';base64'.length)\r\n                : middle;\r\n        }\r\n        this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\r\n    }\r\n}\r\nfunction dataURLBytes_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    if (parts.base64) {\r\n        return base64Bytes_(StringFormat.BASE64, parts.rest);\r\n    }\r\n    else {\r\n        return percentEncodedBytes_(parts.rest);\r\n    }\r\n}\r\nfunction dataURLContentType_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    return parts.contentType;\r\n}\r\nfunction endsWith(s, end) {\r\n    const longEnough = s.length >= end.length;\r\n    if (!longEnough) {\r\n        return false;\r\n    }\r\n    return s.substring(s.length - end.length) === end;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\r\nclass FbsBlob {\r\n    constructor(data, elideCopy) {\r\n        let size = 0;\r\n        let blobType = '';\r\n        if (isNativeBlob(data)) {\r\n            this.data_ = data;\r\n            size = data.size;\r\n            blobType = data.type;\r\n        }\r\n        else if (data instanceof ArrayBuffer) {\r\n            if (elideCopy) {\r\n                this.data_ = new Uint8Array(data);\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.byteLength);\r\n                this.data_.set(new Uint8Array(data));\r\n            }\r\n            size = this.data_.length;\r\n        }\r\n        else if (data instanceof Uint8Array) {\r\n            if (elideCopy) {\r\n                this.data_ = data;\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.length);\r\n                this.data_.set(data);\r\n            }\r\n            size = data.length;\r\n        }\r\n        this.size_ = size;\r\n        this.type_ = blobType;\r\n    }\r\n    size() {\r\n        return this.size_;\r\n    }\r\n    type() {\r\n        return this.type_;\r\n    }\r\n    slice(startByte, endByte) {\r\n        if (isNativeBlob(this.data_)) {\r\n            const realBlob = this.data_;\r\n            const sliced = sliceBlob(realBlob, startByte, endByte);\r\n            if (sliced === null) {\r\n                return null;\r\n            }\r\n            return new FbsBlob(sliced);\r\n        }\r\n        else {\r\n            const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\r\n            return new FbsBlob(slice, true);\r\n        }\r\n    }\r\n    static getBlob(...args) {\r\n        if (isNativeBlobDefined()) {\r\n            const blobby = args.map((val) => {\r\n                if (val instanceof FbsBlob) {\r\n                    return val.data_;\r\n                }\r\n                else {\r\n                    return val;\r\n                }\r\n            });\r\n            return new FbsBlob(getBlob$1.apply(null, blobby));\r\n        }\r\n        else {\r\n            const uint8Arrays = args.map((val) => {\r\n                if (isString(val)) {\r\n                    return dataFromString(StringFormat.RAW, val).data;\r\n                }\r\n                else {\r\n                    // Blobs don't exist, so this has to be a Uint8Array.\r\n                    return val.data_;\r\n                }\r\n            });\r\n            let finalLength = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                finalLength += array.byteLength;\r\n            });\r\n            const merged = new Uint8Array(finalLength);\r\n            let index = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                for (let i = 0; i < array.length; i++) {\r\n                    merged[index++] = array[i];\r\n                }\r\n            });\r\n            return new FbsBlob(merged, true);\r\n        }\r\n    }\r\n    uploadData() {\r\n        return this.data_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\r\nfunction jsonObjectOrNull(s) {\r\n    let obj;\r\n    try {\r\n        obj = JSON.parse(s);\r\n    }\r\n    catch (e) {\r\n        return null;\r\n    }\r\n    if (isNonArrayObject(obj)) {\r\n        return obj;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\r\n/**\r\n * @return Null if the path is already at the root.\r\n */\r\nfunction parent(path) {\r\n    if (path.length === 0) {\r\n        return null;\r\n    }\r\n    const index = path.lastIndexOf('/');\r\n    if (index === -1) {\r\n        return '';\r\n    }\r\n    const newPath = path.slice(0, index);\r\n    return newPath;\r\n}\r\nfunction child(path, childPath) {\r\n    const canonicalChildPath = childPath\r\n        .split('/')\r\n        .filter(component => component.length > 0)\r\n        .join('/');\r\n    if (path.length === 0) {\r\n        return canonicalChildPath;\r\n    }\r\n    else {\r\n        return path + '/' + canonicalChildPath;\r\n    }\r\n}\r\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\r\nfunction lastComponent(path) {\r\n    const index = path.lastIndexOf('/', path.length - 2);\r\n    if (index === -1) {\r\n        return path;\r\n    }\r\n    else {\r\n        return path.slice(index + 1);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction noXform_(metadata, value) {\r\n    return value;\r\n}\r\nclass Mapping {\r\n    constructor(server, local, writable, xform) {\r\n        this.server = server;\r\n        this.local = local || server;\r\n        this.writable = !!writable;\r\n        this.xform = xform || noXform_;\r\n    }\r\n}\r\nlet mappings_ = null;\r\nfunction xformPath(fullPath) {\r\n    if (!isString(fullPath) || fullPath.length < 2) {\r\n        return fullPath;\r\n    }\r\n    else {\r\n        return lastComponent(fullPath);\r\n    }\r\n}\r\nfunction getMappings() {\r\n    if (mappings_) {\r\n        return mappings_;\r\n    }\r\n    const mappings = [];\r\n    mappings.push(new Mapping('bucket'));\r\n    mappings.push(new Mapping('generation'));\r\n    mappings.push(new Mapping('metageneration'));\r\n    mappings.push(new Mapping('name', 'fullPath', true));\r\n    function mappingsXformPath(_metadata, fullPath) {\r\n        return xformPath(fullPath);\r\n    }\r\n    const nameMapping = new Mapping('name');\r\n    nameMapping.xform = mappingsXformPath;\r\n    mappings.push(nameMapping);\r\n    /**\r\n     * Coerces the second param to a number, if it is defined.\r\n     */\r\n    function xformSize(_metadata, size) {\r\n        if (size !== undefined) {\r\n            return Number(size);\r\n        }\r\n        else {\r\n            return size;\r\n        }\r\n    }\r\n    const sizeMapping = new Mapping('size');\r\n    sizeMapping.xform = xformSize;\r\n    mappings.push(sizeMapping);\r\n    mappings.push(new Mapping('timeCreated'));\r\n    mappings.push(new Mapping('updated'));\r\n    mappings.push(new Mapping('md5Hash', null, true));\r\n    mappings.push(new Mapping('cacheControl', null, true));\r\n    mappings.push(new Mapping('contentDisposition', null, true));\r\n    mappings.push(new Mapping('contentEncoding', null, true));\r\n    mappings.push(new Mapping('contentLanguage', null, true));\r\n    mappings.push(new Mapping('contentType', null, true));\r\n    mappings.push(new Mapping('metadata', 'customMetadata', true));\r\n    mappings_ = mappings;\r\n    return mappings_;\r\n}\r\nfunction addRef(metadata, service) {\r\n    function generateRef() {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const loc = new Location(bucket, path);\r\n        return service._makeStorageReference(loc);\r\n    }\r\n    Object.defineProperty(metadata, 'ref', { get: generateRef });\r\n}\r\nfunction fromResource(service, resource, mappings) {\r\n    const metadata = {};\r\n    metadata['type'] = 'file';\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\r\n    }\r\n    addRef(metadata, service);\r\n    return metadata;\r\n}\r\nfunction fromResourceString(service, resourceString, mappings) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromResource(service, resource, mappings);\r\n}\r\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    if (!isString(obj['downloadTokens'])) {\r\n        // This can happen if objects are uploaded through GCS and retrieved\r\n        // through list, so we don't want to throw an Error.\r\n        return null;\r\n    }\r\n    const tokens = obj['downloadTokens'];\r\n    if (tokens.length === 0) {\r\n        return null;\r\n    }\r\n    const encode = encodeURIComponent;\r\n    const tokensList = tokens.split(',');\r\n    const urls = tokensList.map((token) => {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\r\n        const base = makeUrl(urlPart, host, protocol);\r\n        const queryString = makeQueryString({\r\n            alt: 'media',\r\n            token\r\n        });\r\n        return base + queryString;\r\n    });\r\n    return urls[0];\r\n}\r\nfunction toResourceString(metadata, mappings) {\r\n    const resource = {};\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        if (mapping.writable) {\r\n            resource[mapping.server] = metadata[mapping.local];\r\n        }\r\n    }\r\n    return JSON.stringify(resource);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PREFIXES_KEY = 'prefixes';\r\nconst ITEMS_KEY = 'items';\r\nfunction fromBackendResponse(service, bucket, resource) {\r\n    const listResult = {\r\n        prefixes: [],\r\n        items: [],\r\n        nextPageToken: resource['nextPageToken']\r\n    };\r\n    if (resource[PREFIXES_KEY]) {\r\n        for (const path of resource[PREFIXES_KEY]) {\r\n            const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\r\n            const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\r\n            listResult.prefixes.push(reference);\r\n        }\r\n    }\r\n    if (resource[ITEMS_KEY]) {\r\n        for (const item of resource[ITEMS_KEY]) {\r\n            const reference = service._makeStorageReference(new Location(bucket, item['name']));\r\n            listResult.items.push(reference);\r\n        }\r\n    }\r\n    return listResult;\r\n}\r\nfunction fromResponseString(service, bucket, resourceString) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromBackendResponse(service, bucket, resource);\r\n}\n\n/**\r\n * Contains a fully specified request.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param O - the output response type used by the rest of the SDK.\r\n */\r\nclass RequestInfo {\r\n    constructor(url, method, \r\n    /**\r\n     * Returns the value with which to resolve the request's promise. Only called\r\n     * if the request is successful. Throw from this function to reject the\r\n     * returned Request's promise with the thrown error.\r\n     * Note: The XhrIo passed to this function may be reused after this callback\r\n     * returns. Do not keep a reference to it in any way.\r\n     */\r\n    handler, timeout) {\r\n        this.url = url;\r\n        this.method = method;\r\n        this.handler = handler;\r\n        this.timeout = timeout;\r\n        this.urlParams = {};\r\n        this.headers = {};\r\n        this.body = null;\r\n        this.errorHandler = null;\r\n        /**\r\n         * Called with the current number of bytes uploaded and total size (-1 if not\r\n         * computable) of the request body (i.e. used to report upload progress).\r\n         */\r\n        this.progressCallback = null;\r\n        this.successCodes = [200];\r\n        this.additionalRetryCodes = [];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\r\nfunction handlerCheck(cndn) {\r\n    if (!cndn) {\r\n        throw unknown();\r\n    }\r\n}\r\nfunction metadataHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return metadata;\r\n    }\r\n    return handler;\r\n}\r\nfunction listHandler(service, bucket) {\r\n    function handler(xhr, text) {\r\n        const listResult = fromResponseString(service, bucket, text);\r\n        handlerCheck(listResult !== null);\r\n        return listResult;\r\n    }\r\n    return handler;\r\n}\r\nfunction downloadUrlHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\r\n    }\r\n    return handler;\r\n}\r\nfunction sharedErrorHandler(location) {\r\n    function errorHandler(xhr, err) {\r\n        let newErr;\r\n        if (xhr.getStatus() === 401) {\r\n            if (\r\n            // This exact message string is the only consistent part of the\r\n            // server's error response that identifies it as an App Check error.\r\n            xhr.getErrorText().includes('Firebase App Check token is invalid')) {\r\n                newErr = unauthorizedApp();\r\n            }\r\n            else {\r\n                newErr = unauthenticated();\r\n            }\r\n        }\r\n        else {\r\n            if (xhr.getStatus() === 402) {\r\n                newErr = quotaExceeded(location.bucket);\r\n            }\r\n            else {\r\n                if (xhr.getStatus() === 403) {\r\n                    newErr = unauthorized(location.path);\r\n                }\r\n                else {\r\n                    newErr = err;\r\n                }\r\n            }\r\n        }\r\n        newErr.status = xhr.getStatus();\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction objectErrorHandler(location) {\r\n    const shared = sharedErrorHandler(location);\r\n    function errorHandler(xhr, err) {\r\n        let newErr = shared(xhr, err);\r\n        if (xhr.getStatus() === 404) {\r\n            newErr = objectNotFound(location.path);\r\n        }\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction getMetadata$2(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\r\n    const urlParams = {};\r\n    if (location.isRoot) {\r\n        urlParams['prefix'] = '';\r\n    }\r\n    else {\r\n        urlParams['prefix'] = location.path + '/';\r\n    }\r\n    if (delimiter && delimiter.length > 0) {\r\n        urlParams['delimiter'] = delimiter;\r\n    }\r\n    if (pageToken) {\r\n        urlParams['pageToken'] = pageToken;\r\n    }\r\n    if (maxResults) {\r\n        urlParams['maxResults'] = maxResults;\r\n    }\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, (_, data) => data, timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    if (maxDownloadSizeBytes !== undefined) {\r\n        requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\r\n        requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\r\n    }\r\n    return requestInfo;\r\n}\r\nfunction getDownloadUrl(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction updateMetadata$2(service, location, metadata, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'PATCH';\r\n    const body = toResourceString(metadata, mappings);\r\n    const headers = { 'Content-Type': 'application/json; charset=utf-8' };\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction deleteObject$2(service, location) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'DELETE';\r\n    const timeout = service.maxOperationRetryTime;\r\n    function handler(_xhr, _text) { }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.successCodes = [200, 204];\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction determineContentType_(metadata, blob) {\r\n    return ((metadata && metadata['contentType']) ||\r\n        (blob && blob.type()) ||\r\n        'application/octet-stream');\r\n}\r\nfunction metadataForUpload_(location, blob, metadata) {\r\n    const metadataClone = Object.assign({}, metadata);\r\n    metadataClone['fullPath'] = location.path;\r\n    metadataClone['size'] = blob.size();\r\n    if (!metadataClone['contentType']) {\r\n        metadataClone['contentType'] = determineContentType_(null, blob);\r\n    }\r\n    return metadataClone;\r\n}\r\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\r\nfunction multipartUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'multipart'\r\n    };\r\n    function genBoundary() {\r\n        let str = '';\r\n        for (let i = 0; i < 2; i++) {\r\n            str = str + Math.random().toString().slice(2);\r\n        }\r\n        return str;\r\n    }\r\n    const boundary = genBoundary();\r\n    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\r\n    const metadata_ = metadataForUpload_(location, blob, metadata);\r\n    const metadataString = toResourceString(metadata_, mappings);\r\n    const preBlobPart = '--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\r\n        metadataString +\r\n        '\\r\\n--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: ' +\r\n        metadata_['contentType'] +\r\n        '\\r\\n\\r\\n';\r\n    const postBlobPart = '\\r\\n--' + boundary + '--';\r\n    const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    const urlParams = { name: metadata_['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\r\nclass ResumableUploadStatus {\r\n    constructor(current, total, finalized, metadata) {\r\n        this.current = current;\r\n        this.total = total;\r\n        this.finalized = !!finalized;\r\n        this.metadata = metadata || null;\r\n    }\r\n}\r\nfunction checkResumeHeader_(xhr, allowed) {\r\n    let status = null;\r\n    try {\r\n        status = xhr.getResponseHeader('X-Goog-Upload-Status');\r\n    }\r\n    catch (e) {\r\n        handlerCheck(false);\r\n    }\r\n    const allowedStatus = allowed || ['active'];\r\n    handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\r\n    return status;\r\n}\r\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const metadataForUpload = metadataForUpload_(location, blob, metadata);\r\n    const urlParams = { name: metadataForUpload['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'resumable',\r\n        'X-Goog-Upload-Command': 'start',\r\n        'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\r\n        'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n    };\r\n    const body = toResourceString(metadataForUpload, mappings);\r\n    const timeout = service.maxUploadRetryTime;\r\n    function handler(xhr) {\r\n        checkResumeHeader_(xhr);\r\n        let url;\r\n        try {\r\n            url = xhr.getResponseHeader('X-Goog-Upload-URL');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        handlerCheck(isString(url));\r\n        return url;\r\n    }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\r\nfunction getResumableUploadStatus(service, location, url, blob) {\r\n    const headers = { 'X-Goog-Upload-Command': 'query' };\r\n    function handler(xhr) {\r\n        const status = checkResumeHeader_(xhr, ['active', 'final']);\r\n        let sizeString = null;\r\n        try {\r\n            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        if (!sizeString) {\r\n            // null or empty string\r\n            handlerCheck(false);\r\n        }\r\n        const size = Number(sizeString);\r\n        handlerCheck(!isNaN(size));\r\n        return new ResumableUploadStatus(size, blob.size(), status === 'final');\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\r\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\r\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\r\n    // TODO(andysoto): standardize on internal asserts\r\n    // assert(!(opt_status && opt_status.finalized));\r\n    const status_ = new ResumableUploadStatus(0, 0);\r\n    if (status) {\r\n        status_.current = status.current;\r\n        status_.total = status.total;\r\n    }\r\n    else {\r\n        status_.current = 0;\r\n        status_.total = blob.size();\r\n    }\r\n    if (blob.size() !== status_.total) {\r\n        throw serverFileWrongSize();\r\n    }\r\n    const bytesLeft = status_.total - status_.current;\r\n    let bytesToUpload = bytesLeft;\r\n    if (chunkSize > 0) {\r\n        bytesToUpload = Math.min(bytesToUpload, chunkSize);\r\n    }\r\n    const startByte = status_.current;\r\n    const endByte = startByte + bytesToUpload;\r\n    let uploadCommand = '';\r\n    if (bytesToUpload === 0) {\r\n        uploadCommand = 'finalize';\r\n    }\r\n    else if (bytesLeft === bytesToUpload) {\r\n        uploadCommand = 'upload, finalize';\r\n    }\r\n    else {\r\n        uploadCommand = 'upload';\r\n    }\r\n    const headers = {\r\n        'X-Goog-Upload-Command': uploadCommand,\r\n        'X-Goog-Upload-Offset': `${status_.current}`\r\n    };\r\n    const body = blob.slice(startByte, endByte);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    function handler(xhr, text) {\r\n        // TODO(andysoto): Verify the MD5 of each uploaded range:\r\n        // the 'x-range-md5' header comes back with status code 308 responses.\r\n        // We'll only be able to bail out though, because you can't re-upload a\r\n        // range that you previously uploaded.\r\n        const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\r\n        const newCurrent = status_.current + bytesToUpload;\r\n        const size = blob.size();\r\n        let metadata;\r\n        if (uploadStatus === 'final') {\r\n            metadata = metadataHandler(service, mappings)(xhr, text);\r\n        }\r\n        else {\r\n            metadata = null;\r\n        }\r\n        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.progressCallback = progressCallback || null;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\r\nconst TaskEvent = {\r\n    /**\r\n     * For this event,\r\n     * <ul>\r\n     *   <li>The `next` function is triggered on progress updates and when the\r\n     *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n     *       argument.</li>\r\n     *   <li>The `error` function is triggered if the upload is canceled or fails\r\n     *       for another reason.</li>\r\n     *   <li>The `complete` function is triggered if the upload completes\r\n     *       successfully.</li>\r\n     * </ul>\r\n     */\r\n    STATE_CHANGED: 'state_changed'\r\n};\r\n// type keys = keyof TaskState\r\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\r\nconst TaskState = {\r\n    /** The task is currently transferring data. */\r\n    RUNNING: 'running',\r\n    /** The task was paused by the user. */\r\n    PAUSED: 'paused',\r\n    /** The task completed successfully. */\r\n    SUCCESS: 'success',\r\n    /** The task was canceled. */\r\n    CANCELED: 'canceled',\r\n    /** The task failed with an error. */\r\n    ERROR: 'error'\r\n};\r\nfunction taskStateFromInternalTaskState(state) {\r\n    switch (state) {\r\n        case \"running\" /* InternalTaskState.RUNNING */:\r\n        case \"pausing\" /* InternalTaskState.PAUSING */:\r\n        case \"canceling\" /* InternalTaskState.CANCELING */:\r\n            return TaskState.RUNNING;\r\n        case \"paused\" /* InternalTaskState.PAUSED */:\r\n            return TaskState.PAUSED;\r\n        case \"success\" /* InternalTaskState.SUCCESS */:\r\n            return TaskState.SUCCESS;\r\n        case \"canceled\" /* InternalTaskState.CANCELED */:\r\n            return TaskState.CANCELED;\r\n        case \"error\" /* InternalTaskState.ERROR */:\r\n            return TaskState.ERROR;\r\n        default:\r\n            // TODO(andysoto): assert(false);\r\n            return TaskState.ERROR;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Observer {\r\n    constructor(nextOrObserver, error, complete) {\r\n        const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\r\n        if (asFunctions) {\r\n            this.next = nextOrObserver;\r\n            this.error = error !== null && error !== void 0 ? error : undefined;\r\n            this.complete = complete !== null && complete !== void 0 ? complete : undefined;\r\n        }\r\n        else {\r\n            const observer = nextOrObserver;\r\n            this.next = observer.next;\r\n            this.error = observer.error;\r\n            this.complete = observer.complete;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(f) {\r\n    return (...argsToForward) => {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.resolve().then(() => f(...argsToForward));\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** An override for the text-based Connection. Used in tests. */\r\nlet textFactoryOverride = null;\r\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\r\nclass XhrConnection {\r\n    constructor() {\r\n        this.sent_ = false;\r\n        this.xhr_ = new XMLHttpRequest();\r\n        this.initXhr();\r\n        this.errorCode_ = ErrorCode.NO_ERROR;\r\n        this.sendPromise_ = new Promise(resolve => {\r\n            this.xhr_.addEventListener('abort', () => {\r\n                this.errorCode_ = ErrorCode.ABORT;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('error', () => {\r\n                this.errorCode_ = ErrorCode.NETWORK_ERROR;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('load', () => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    send(url, method, body, headers) {\r\n        if (this.sent_) {\r\n            throw internalError('cannot .send() more than once');\r\n        }\r\n        this.sent_ = true;\r\n        this.xhr_.open(method, url, true);\r\n        if (headers !== undefined) {\r\n            for (const key in headers) {\r\n                if (headers.hasOwnProperty(key)) {\r\n                    this.xhr_.setRequestHeader(key, headers[key].toString());\r\n                }\r\n            }\r\n        }\r\n        if (body !== undefined) {\r\n            this.xhr_.send(body);\r\n        }\r\n        else {\r\n            this.xhr_.send();\r\n        }\r\n        return this.sendPromise_;\r\n    }\r\n    getErrorCode() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorCode() before sending');\r\n        }\r\n        return this.errorCode_;\r\n    }\r\n    getStatus() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getStatus() before sending');\r\n        }\r\n        try {\r\n            return this.xhr_.status;\r\n        }\r\n        catch (e) {\r\n            return -1;\r\n        }\r\n    }\r\n    getResponse() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getResponse() before sending');\r\n        }\r\n        return this.xhr_.response;\r\n    }\r\n    getErrorText() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorText() before sending');\r\n        }\r\n        return this.xhr_.statusText;\r\n    }\r\n    /** Aborts the request. */\r\n    abort() {\r\n        this.xhr_.abort();\r\n    }\r\n    getResponseHeader(header) {\r\n        return this.xhr_.getResponseHeader(header);\r\n    }\r\n    addUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.addEventListener('progress', listener);\r\n        }\r\n    }\r\n    removeUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.removeEventListener('progress', listener);\r\n        }\r\n    }\r\n}\r\nclass XhrTextConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'text';\r\n    }\r\n}\r\nfunction newTextConnection() {\r\n    return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\r\n}\r\nclass XhrBytesConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'arraybuffer';\r\n    }\r\n}\r\nfunction newBytesConnection() {\r\n    return new XhrBytesConnection();\r\n}\r\nclass XhrBlobConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'blob';\r\n    }\r\n}\r\nfunction newBlobConnection() {\r\n    return new XhrBlobConnection();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\r\nclass UploadTask {\r\n    /**\r\n     * @param ref - The firebaseStorage.Reference object this task came\r\n     *     from, untyped to avoid cyclic dependencies.\r\n     * @param blob - The blob to upload.\r\n     */\r\n    constructor(ref, blob, metadata = null) {\r\n        /**\r\n         * Number of bytes transferred so far.\r\n         */\r\n        this._transferred = 0;\r\n        this._needToFetchStatus = false;\r\n        this._needToFetchMetadata = false;\r\n        this._observers = [];\r\n        this._error = undefined;\r\n        this._uploadUrl = undefined;\r\n        this._request = undefined;\r\n        this._chunkMultiplier = 1;\r\n        this._resolve = undefined;\r\n        this._reject = undefined;\r\n        this._ref = ref;\r\n        this._blob = blob;\r\n        this._metadata = metadata;\r\n        this._mappings = getMappings();\r\n        this._resumable = this._shouldDoResumable(this._blob);\r\n        this._state = \"running\" /* InternalTaskState.RUNNING */;\r\n        this._errorHandler = error => {\r\n            this._request = undefined;\r\n            this._chunkMultiplier = 1;\r\n            if (error._codeEquals(StorageErrorCode.CANCELED)) {\r\n                this._needToFetchStatus = true;\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                const backoffExpired = this.isExponentialBackoffExpired();\r\n                if (isRetryStatusCode(error.status, [])) {\r\n                    if (backoffExpired) {\r\n                        error = retryLimitExceeded();\r\n                    }\r\n                    else {\r\n                        this.sleepTime = Math.max(this.sleepTime * 2, DEFAULT_MIN_SLEEP_TIME_MILLIS);\r\n                        this._needToFetchStatus = true;\r\n                        this.completeTransitions_();\r\n                        return;\r\n                    }\r\n                }\r\n                this._error = error;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n            }\r\n        };\r\n        this._metadataErrorHandler = error => {\r\n            this._request = undefined;\r\n            if (error._codeEquals(StorageErrorCode.CANCELED)) {\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                this._error = error;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n            }\r\n        };\r\n        this.sleepTime = 0;\r\n        this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\r\n        this._promise = new Promise((resolve, reject) => {\r\n            this._resolve = resolve;\r\n            this._reject = reject;\r\n            this._start();\r\n        });\r\n        // Prevent uncaught rejections on the internal promise from bubbling out\r\n        // to the top level with a dummy handler.\r\n        this._promise.then(null, () => { });\r\n    }\r\n    isExponentialBackoffExpired() {\r\n        return this.sleepTime > this.maxSleepTime;\r\n    }\r\n    _makeProgressCallback() {\r\n        const sizeBefore = this._transferred;\r\n        return loaded => this._updateProgress(sizeBefore + loaded);\r\n    }\r\n    _shouldDoResumable(blob) {\r\n        return blob.size() > 256 * 1024;\r\n    }\r\n    _start() {\r\n        if (this._state !== \"running\" /* InternalTaskState.RUNNING */) {\r\n            // This can happen if someone pauses us in a resume callback, for example.\r\n            return;\r\n        }\r\n        if (this._request !== undefined) {\r\n            return;\r\n        }\r\n        if (this._resumable) {\r\n            if (this._uploadUrl === undefined) {\r\n                this._createResumable();\r\n            }\r\n            else {\r\n                if (this._needToFetchStatus) {\r\n                    this._fetchStatus();\r\n                }\r\n                else {\r\n                    if (this._needToFetchMetadata) {\r\n                        // Happens if we miss the metadata on upload completion.\r\n                        this._fetchMetadata();\r\n                    }\r\n                    else {\r\n                        this.pendingTimeout = setTimeout(() => {\r\n                            this.pendingTimeout = undefined;\r\n                            this._continueUpload();\r\n                        }, this.sleepTime);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._oneShotUpload();\r\n        }\r\n    }\r\n    _resolveToken(callback) {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.all([\r\n            this._ref.storage._getAuthToken(),\r\n            this._ref.storage._getAppCheckToken()\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            switch (this._state) {\r\n                case \"running\" /* InternalTaskState.RUNNING */:\r\n                    callback(authToken, appCheckToken);\r\n                    break;\r\n                case \"canceling\" /* InternalTaskState.CANCELING */:\r\n                    this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\r\n                    break;\r\n                case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                    this._transition(\"paused\" /* InternalTaskState.PAUSED */);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    // TODO(andysoto): assert false\r\n    _createResumable() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = createRequest;\r\n            createRequest.getPromise().then((url) => {\r\n                this._request = undefined;\r\n                this._uploadUrl = url;\r\n                this._needToFetchStatus = false;\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _fetchStatus() {\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\r\n            const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = statusRequest;\r\n            statusRequest.getPromise().then(status => {\r\n                status = status;\r\n                this._request = undefined;\r\n                this._updateProgress(status.current);\r\n                this._needToFetchStatus = false;\r\n                if (status.finalized) {\r\n                    this._needToFetchMetadata = true;\r\n                }\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _continueUpload() {\r\n        const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        const status = new ResumableUploadStatus(this._transferred, this._blob.size());\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            let requestInfo;\r\n            try {\r\n                requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\r\n            }\r\n            catch (e) {\r\n                this._error = e;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n                return;\r\n            }\r\n            const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken, \r\n            /*retry=*/ false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\r\n            );\r\n            this._request = uploadRequest;\r\n            uploadRequest.getPromise().then((newStatus) => {\r\n                this._increaseMultiplier();\r\n                this._request = undefined;\r\n                this._updateProgress(newStatus.current);\r\n                if (newStatus.finalized) {\r\n                    this._metadata = newStatus.metadata;\r\n                    this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n                }\r\n                else {\r\n                    this.completeTransitions_();\r\n                }\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _increaseMultiplier() {\r\n        const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        // Max chunk size is 32M.\r\n        if (currentSize * 2 < 32 * 1024 * 1024) {\r\n            this._chunkMultiplier *= 2;\r\n        }\r\n    }\r\n    _fetchMetadata() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\r\n            const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = metadataRequest;\r\n            metadataRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n            }, this._metadataErrorHandler);\r\n        });\r\n    }\r\n    _oneShotUpload() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = multipartRequest;\r\n            multipartRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._updateProgress(this._blob.size());\r\n                this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _updateProgress(transferred) {\r\n        const old = this._transferred;\r\n        this._transferred = transferred;\r\n        // A progress update can make the \"transferred\" value smaller (e.g. a\r\n        // partial upload not completed by server, after which the \"transferred\"\r\n        // value may reset to the value at the beginning of the request).\r\n        if (this._transferred !== old) {\r\n            this._notifyObservers();\r\n        }\r\n    }\r\n    _transition(state) {\r\n        if (this._state === state) {\r\n            return;\r\n        }\r\n        switch (state) {\r\n            case \"canceling\" /* InternalTaskState.CANCELING */:\r\n            case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                if (this._request !== undefined) {\r\n                    this._request.cancel();\r\n                }\r\n                else if (this.pendingTimeout) {\r\n                    clearTimeout(this.pendingTimeout);\r\n                    this.pendingTimeout = undefined;\r\n                    this.completeTransitions_();\r\n                }\r\n                break;\r\n            case \"running\" /* InternalTaskState.RUNNING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                const wasPaused = this._state === \"paused\" /* InternalTaskState.PAUSED */;\r\n                this._state = state;\r\n                if (wasPaused) {\r\n                    this._notifyObservers();\r\n                    this._start();\r\n                }\r\n                break;\r\n            case \"paused\" /* InternalTaskState.PAUSED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"canceled\" /* InternalTaskState.CANCELED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._error = canceled();\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"error\" /* InternalTaskState.ERROR */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"success\" /* InternalTaskState.SUCCESS */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n        }\r\n    }\r\n    completeTransitions_() {\r\n        switch (this._state) {\r\n            case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                this._transition(\"paused\" /* InternalTaskState.PAUSED */);\r\n                break;\r\n            case \"canceling\" /* InternalTaskState.CANCELING */:\r\n                this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\r\n                break;\r\n            case \"running\" /* InternalTaskState.RUNNING */:\r\n                this._start();\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * A snapshot of the current task state.\r\n     */\r\n    get snapshot() {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        return {\r\n            bytesTransferred: this._transferred,\r\n            totalBytes: this._blob.size(),\r\n            state: externalState,\r\n            metadata: this._metadata,\r\n            task: this,\r\n            ref: this._ref\r\n        };\r\n    }\r\n    /**\r\n     * Adds a callback for an event.\r\n     * @param type - The type of event to listen for.\r\n     * @param nextOrObserver -\r\n     *     The `next` function, which gets called for each item in\r\n     *     the event stream, or an observer object with some or all of these three\r\n     *     properties (`next`, `error`, `complete`).\r\n     * @param error - A function that gets called with a `StorageError`\r\n     *     if the event stream ends due to an error.\r\n     * @param completed - A function that gets called if the\r\n     *     event stream ends normally.\r\n     * @returns\r\n     *     If only the event argument is passed, returns a function you can use to\r\n     *     add callbacks (see the examples above). If more than just the event\r\n     *     argument is passed, returns a function you can call to unregister the\r\n     *     callbacks.\r\n     */\r\n    on(type, nextOrObserver, error, completed) {\r\n        // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\r\n        const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\r\n        this._addObserver(observer);\r\n        return () => {\r\n            this._removeObserver(observer);\r\n        };\r\n    }\r\n    /**\r\n     * This object behaves like a Promise, and resolves with its snapshot data\r\n     * when the upload completes.\r\n     * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n     * @param onRejected - The rejection callback.\r\n     */\r\n    then(onFulfilled, onRejected) {\r\n        // These casts are needed so that TypeScript can infer the types of the\r\n        // resulting Promise.\r\n        return this._promise.then(onFulfilled, onRejected);\r\n    }\r\n    /**\r\n     * Equivalent to calling `then(null, onRejected)`.\r\n     */\r\n    catch(onRejected) {\r\n        return this.then(null, onRejected);\r\n    }\r\n    /**\r\n     * Adds the given observer.\r\n     */\r\n    _addObserver(observer) {\r\n        this._observers.push(observer);\r\n        this._notifyObserver(observer);\r\n    }\r\n    /**\r\n     * Removes the given observer.\r\n     */\r\n    _removeObserver(observer) {\r\n        const i = this._observers.indexOf(observer);\r\n        if (i !== -1) {\r\n            this._observers.splice(i, 1);\r\n        }\r\n    }\r\n    _notifyObservers() {\r\n        this._finishPromise();\r\n        const observers = this._observers.slice();\r\n        observers.forEach(observer => {\r\n            this._notifyObserver(observer);\r\n        });\r\n    }\r\n    _finishPromise() {\r\n        if (this._resolve !== undefined) {\r\n            let triggered = true;\r\n            switch (taskStateFromInternalTaskState(this._state)) {\r\n                case TaskState.SUCCESS:\r\n                    async(this._resolve.bind(null, this.snapshot))();\r\n                    break;\r\n                case TaskState.CANCELED:\r\n                case TaskState.ERROR:\r\n                    const toCall = this._reject;\r\n                    async(toCall.bind(null, this._error))();\r\n                    break;\r\n                default:\r\n                    triggered = false;\r\n                    break;\r\n            }\r\n            if (triggered) {\r\n                this._resolve = undefined;\r\n                this._reject = undefined;\r\n            }\r\n        }\r\n    }\r\n    _notifyObserver(observer) {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        switch (externalState) {\r\n            case TaskState.RUNNING:\r\n            case TaskState.PAUSED:\r\n                if (observer.next) {\r\n                    async(observer.next.bind(observer, this.snapshot))();\r\n                }\r\n                break;\r\n            case TaskState.SUCCESS:\r\n                if (observer.complete) {\r\n                    async(observer.complete.bind(observer))();\r\n                }\r\n                break;\r\n            case TaskState.CANCELED:\r\n            case TaskState.ERROR:\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n                break;\r\n            default:\r\n                // TODO(andysoto): assert(false);\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n        }\r\n    }\r\n    /**\r\n     * Resumes a paused task. Has no effect on a currently running or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    resume() {\r\n        const valid = this._state === \"paused\" /* InternalTaskState.PAUSED */ ||\r\n            this._state === \"pausing\" /* InternalTaskState.PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"running\" /* InternalTaskState.RUNNING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Pauses a currently running task. Has no effect on a paused or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    pause() {\r\n        const valid = this._state === \"running\" /* InternalTaskState.RUNNING */;\r\n        if (valid) {\r\n            this._transition(\"pausing\" /* InternalTaskState.PAUSING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Cancels a currently running or paused task. Has no effect on a complete or\r\n     * failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    cancel() {\r\n        const valid = this._state === \"running\" /* InternalTaskState.RUNNING */ ||\r\n            this._state === \"pausing\" /* InternalTaskState.PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"canceling\" /* InternalTaskState.CANCELING */);\r\n        }\r\n        return valid;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\r\nclass Reference {\r\n    constructor(_service, location) {\r\n        this._service = _service;\r\n        if (location instanceof Location) {\r\n            this._location = location;\r\n        }\r\n        else {\r\n            this._location = Location.makeFromUrl(location, _service.host);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the URL for the bucket and path this object references,\r\n     *     in the form gs://<bucket>/<object-path>\r\n     * @override\r\n     */\r\n    toString() {\r\n        return 'gs://' + this._location.bucket + '/' + this._location.path;\r\n    }\r\n    _newRef(service, location) {\r\n        return new Reference(service, location);\r\n    }\r\n    /**\r\n     * A reference to the root of this object's bucket.\r\n     */\r\n    get root() {\r\n        const location = new Location(this._location.bucket, '');\r\n        return this._newRef(this._service, location);\r\n    }\r\n    /**\r\n     * The name of the bucket containing this reference's object.\r\n     */\r\n    get bucket() {\r\n        return this._location.bucket;\r\n    }\r\n    /**\r\n     * The full path of this object.\r\n     */\r\n    get fullPath() {\r\n        return this._location.path;\r\n    }\r\n    /**\r\n     * The short name of this object, which is the last component of the full path.\r\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n     */\r\n    get name() {\r\n        return lastComponent(this._location.path);\r\n    }\r\n    /**\r\n     * The `StorageService` instance this `StorageReference` is associated with.\r\n     */\r\n    get storage() {\r\n        return this._service;\r\n    }\r\n    /**\r\n     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n     * this reference is the root.\r\n     */\r\n    get parent() {\r\n        const newPath = parent(this._location.path);\r\n        if (newPath === null) {\r\n            return null;\r\n        }\r\n        const location = new Location(this._location.bucket, newPath);\r\n        return new Reference(this._service, location);\r\n    }\r\n    /**\r\n     * Utility function to throw an error in methods that do not accept a root reference.\r\n     */\r\n    _throwIfRoot(name) {\r\n        if (this._location.path === '') {\r\n            throw invalidRootOperation(name);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded bytes.\r\n */\r\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\r\n    ref._throwIfRoot('getBytes');\r\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newBytesConnection)\r\n        .then(bytes => maxDownloadSizeBytes !== undefined\r\n        ? // GCS may not honor the Range header for small files\r\n            bytes.slice(0, maxDownloadSizeBytes)\r\n        : bytes);\r\n}\r\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded blob.\r\n */\r\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\r\n    ref._throwIfRoot('getBlob');\r\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newBlobConnection)\r\n        .then(blob => maxDownloadSizeBytes !== undefined\r\n        ? // GCS may not honor the Range header for small files\r\n            blob.slice(0, maxDownloadSizeBytes)\r\n        : blob);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytes');\r\n    const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newTextConnection)\r\n        .then(finalMetadata => {\r\n        return {\r\n            metadata: finalMetadata,\r\n            ref\r\n        };\r\n    });\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytesResumable');\r\n    return new UploadTask(ref, new FbsBlob(data), metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString$1(ref, value, format = StringFormat.RAW, metadata) {\r\n    ref._throwIfRoot('uploadString');\r\n    const data = dataFromString(format, value);\r\n    const metadataClone = Object.assign({}, metadata);\r\n    if (metadataClone['contentType'] == null && data.contentType != null) {\r\n        metadataClone['contentType'] = data.contentType;\r\n    }\r\n    return uploadBytes$1(ref, data.data, metadataClone);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll$1(ref) {\r\n    const accumulator = {\r\n        prefixes: [],\r\n        items: []\r\n    };\r\n    return listAllHelper(ref, accumulator).then(() => accumulator);\r\n}\r\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\r\nasync function listAllHelper(ref, accumulator, pageToken) {\r\n    const opt = {\r\n        // maxResults is 1000 by default.\r\n        pageToken\r\n    };\r\n    const nextPage = await list$1(ref, opt);\r\n    accumulator.prefixes.push(...nextPage.prefixes);\r\n    accumulator.items.push(...nextPage.items);\r\n    if (nextPage.nextPageToken != null) {\r\n        await listAllHelper(ref, accumulator, nextPage.nextPageToken);\r\n    }\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list$1(ref, options) {\r\n    if (options != null) {\r\n        if (typeof options.maxResults === 'number') {\r\n            validateNumber('options.maxResults', \r\n            /* minValue= */ 1, \r\n            /* maxValue= */ 1000, options.maxResults);\r\n        }\r\n    }\r\n    const op = options || {};\r\n    const requestInfo = list$2(ref.storage, ref._location, \r\n    /*delimiter= */ '/', op.pageToken, op.maxResults);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\r\nfunction getMetadata$1(ref) {\r\n    ref._throwIfRoot('getMetadata');\r\n    const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\r\nfunction updateMetadata$1(ref, metadata) {\r\n    ref._throwIfRoot('updateMetadata');\r\n    const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL$1(ref) {\r\n    ref._throwIfRoot('getDownloadURL');\r\n    const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newTextConnection)\r\n        .then(url => {\r\n        if (url === null) {\r\n            throw noDownloadURL();\r\n        }\r\n        return url;\r\n    });\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject$1(ref) {\r\n    ref._throwIfRoot('deleteObject');\r\n    const requestInfo = deleteObject$2(ref.storage, ref._location);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\r\nfunction _getChild$1(ref, childPath) {\r\n    const newPath = child(ref._location.path, childPath);\r\n    const location = new Location(ref._location.bucket, newPath);\r\n    return new Reference(ref.storage, location);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isUrl(path) {\r\n    return /^[A-Za-z]+:\\/\\//.test(path);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\r\nfunction refFromURL(service, url) {\r\n    return new Reference(service, url);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\r\nfunction refFromPath(ref, path) {\r\n    if (ref instanceof FirebaseStorageImpl) {\r\n        const service = ref;\r\n        if (service._bucket == null) {\r\n            throw noDefaultBucket();\r\n        }\r\n        const reference = new Reference(service, service._bucket);\r\n        if (path != null) {\r\n            return refFromPath(reference, path);\r\n        }\r\n        else {\r\n            return reference;\r\n        }\r\n    }\r\n    else {\r\n        // ref is a Reference\r\n        if (path !== undefined) {\r\n            return _getChild$1(ref, path);\r\n        }\r\n        else {\r\n            return ref;\r\n        }\r\n    }\r\n}\r\nfunction ref$1(serviceOrRef, pathOrUrl) {\r\n    if (pathOrUrl && isUrl(pathOrUrl)) {\r\n        if (serviceOrRef instanceof FirebaseStorageImpl) {\r\n            return refFromURL(serviceOrRef, pathOrUrl);\r\n        }\r\n        else {\r\n            throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\r\n        }\r\n    }\r\n    else {\r\n        return refFromPath(serviceOrRef, pathOrUrl);\r\n    }\r\n}\r\nfunction extractBucket(host, config) {\r\n    const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\r\n    if (bucketString == null) {\r\n        return null;\r\n    }\r\n    return Location.makeFromBucketSpec(bucketString, host);\r\n}\r\nfunction connectStorageEmulator$1(storage, host, port, options = {}) {\r\n    storage.host = `${host}:${port}`;\r\n    storage._protocol = 'http';\r\n    const { mockUserToken } = options;\r\n    if (mockUserToken) {\r\n        storage._overrideAuthToken =\r\n            typeof mockUserToken === 'string'\r\n                ? mockUserToken\r\n                : createMockUserToken(mockUserToken, storage.app.options.projectId);\r\n    }\r\n}\r\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\r\nclass FirebaseStorageImpl {\r\n    constructor(\r\n    /**\r\n     * FirebaseApp associated with this StorageService instance.\r\n     */\r\n    app, _authProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _appCheckProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _url, _firebaseVersion) {\r\n        this.app = app;\r\n        this._authProvider = _authProvider;\r\n        this._appCheckProvider = _appCheckProvider;\r\n        this._url = _url;\r\n        this._firebaseVersion = _firebaseVersion;\r\n        this._bucket = null;\r\n        /**\r\n         * This string can be in the formats:\r\n         * - host\r\n         * - host:port\r\n         */\r\n        this._host = DEFAULT_HOST;\r\n        this._protocol = 'https';\r\n        this._appId = null;\r\n        this._deleted = false;\r\n        this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\r\n        this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\r\n        this._requests = new Set();\r\n        if (_url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(_url, this._host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(this._host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The host string for this service, in the form of `host` or\r\n     * `host:port`.\r\n     */\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(host) {\r\n        this._host = host;\r\n        if (this._url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(this._url, host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The maximum time to retry uploads in milliseconds.\r\n     */\r\n    get maxUploadRetryTime() {\r\n        return this._maxUploadRetryTime;\r\n    }\r\n    set maxUploadRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxUploadRetryTime = time;\r\n    }\r\n    /**\r\n     * The maximum time to retry operations other than uploads or downloads in\r\n     * milliseconds.\r\n     */\r\n    get maxOperationRetryTime() {\r\n        return this._maxOperationRetryTime;\r\n    }\r\n    set maxOperationRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxOperationRetryTime = time;\r\n    }\r\n    async _getAuthToken() {\r\n        if (this._overrideAuthToken) {\r\n            return this._overrideAuthToken;\r\n        }\r\n        const auth = this._authProvider.getImmediate({ optional: true });\r\n        if (auth) {\r\n            const tokenData = await auth.getToken();\r\n            if (tokenData !== null) {\r\n                return tokenData.accessToken;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    async _getAppCheckToken() {\r\n        const appCheck = this._appCheckProvider.getImmediate({ optional: true });\r\n        if (appCheck) {\r\n            const result = await appCheck.getToken();\r\n            // TODO: What do we want to do if there is an error getting the token?\r\n            // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\r\n            // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\r\n            // the token (actual or dummy) to send requests.\r\n            return result.token;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Stop running requests and prevent more from being created.\r\n     */\r\n    _delete() {\r\n        if (!this._deleted) {\r\n            this._deleted = true;\r\n            this._requests.forEach(request => request.cancel());\r\n            this._requests.clear();\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    /**\r\n     * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n     * at the given Location.\r\n     */\r\n    _makeStorageReference(loc) {\r\n        return new Reference(this, loc);\r\n    }\r\n    /**\r\n     * @param requestInfo - HTTP RequestInfo object\r\n     * @param authToken - Firebase auth token\r\n     */\r\n    _makeRequest(requestInfo, requestFactory, authToken, appCheckToken, retry = true) {\r\n        if (!this._deleted) {\r\n            const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion, retry);\r\n            this._requests.add(request);\r\n            // Request removes itself from set when complete.\r\n            request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\r\n            return request;\r\n        }\r\n        else {\r\n            return new FailRequest(appDeleted());\r\n        }\r\n    }\r\n    async makeRequestWithTokens(requestInfo, requestFactory) {\r\n        const [authToken, appCheckToken] = await Promise.all([\r\n            this._getAuthToken(),\r\n            this._getAppCheckToken()\r\n        ]);\r\n        return this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\r\n    }\r\n}\n\nconst name = \"@firebase/storage\";\nconst version = \"0.11.2\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Storage.\r\n */\r\nconst STORAGE_TYPE = 'storage';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise containing the object's bytes\r\n */\r\nfunction getBytes(ref, maxDownloadSizeBytes) {\r\n    ref = getModularInstance(ref);\r\n    return getBytesInternal(ref, maxDownloadSizeBytes);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytes$1(ref, data, metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString(ref, value, format, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadString$1(ref, value, format, metadata);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytesResumable$1(ref, data, metadata);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\r\nfunction getMetadata(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getMetadata$1(ref);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\r\nfunction updateMetadata(ref, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return updateMetadata$1(ref, metadata);\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list(ref, options) {\r\n    ref = getModularInstance(ref);\r\n    return list$1(ref, options);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll(ref) {\r\n    ref = getModularInstance(ref);\r\n    return listAll$1(ref);\r\n}\r\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getDownloadURL$1(ref);\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject(ref) {\r\n    ref = getModularInstance(ref);\r\n    return deleteObject$1(ref);\r\n}\r\nfunction ref(serviceOrRef, pathOrUrl) {\r\n    serviceOrRef = getModularInstance(serviceOrRef);\r\n    return ref$1(serviceOrRef, pathOrUrl);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction _getChild(ref, childPath) {\r\n    return _getChild$1(ref, childPath);\r\n}\r\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\r\nfunction getStorage(app = getApp(), bucketUrl) {\r\n    app = getModularInstance(app);\r\n    const storageProvider = _getProvider(app, STORAGE_TYPE);\r\n    const storageInstance = storageProvider.getImmediate({\r\n        identifier: bucketUrl\r\n    });\r\n    const emulator = getDefaultEmulatorHostnameAndPort('storage');\r\n    if (emulator) {\r\n        connectStorageEmulator(storageInstance, ...emulator);\r\n    }\r\n    return storageInstance;\r\n}\r\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\r\nfunction connectStorageEmulator(storage, host, port, options = {}) {\r\n    connectStorageEmulator$1(storage, host, port, options);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * This API is not available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise that resolves with a Blob containing the object's bytes\r\n */\r\nfunction getBlob(ref, maxDownloadSizeBytes) {\r\n    ref = getModularInstance(ref);\r\n    return getBlobInternal(ref, maxDownloadSizeBytes);\r\n}\r\n/**\r\n * Downloads the data at the object's location. Raises an error event if the\r\n * object is not found.\r\n *\r\n * This API is only available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A stream with the object's data as bytes\r\n */\r\nfunction getStream(ref, maxDownloadSizeBytes) {\r\n    throw new Error('getStream() is only supported by NodeJS builds');\r\n}\n\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\r\nfunction factory(container, { instanceIdentifier: url }) {\r\n    const app = container.getProvider('app').getImmediate();\r\n    const authProvider = container.getProvider('auth-internal');\r\n    const appCheckProvider = container.getProvider('app-check-internal');\r\n    return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\r\n}\r\nfunction registerStorage() {\r\n    _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\r\n    //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\r\n    registerVersion(name, version, '');\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\r\nregisterStorage();\n\nexport { StorageError, StorageErrorCode, StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };\n//# sourceMappingURL=index.esm2017.js.map\n","import firebase from '@firebase/app-compat';\nimport { _getChild, uploadBytesResumable, _dataFromString, _UploadTask, _FbsBlob, StringFormat, listAll, list, getMetadata, updateMetadata, getDownloadURL, deleteObject, _invalidRootOperation, _invalidArgument, ref, _Location, connectStorageEmulator, _TaskState, _TaskEvent } from '@firebase/storage';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass UploadTaskSnapshotCompat {\r\n    constructor(_delegate, task, ref) {\r\n        this._delegate = _delegate;\r\n        this.task = task;\r\n        this.ref = ref;\r\n    }\r\n    get bytesTransferred() {\r\n        return this._delegate.bytesTransferred;\r\n    }\r\n    get metadata() {\r\n        return this._delegate.metadata;\r\n    }\r\n    get state() {\r\n        return this._delegate.state;\r\n    }\r\n    get totalBytes() {\r\n        return this._delegate.totalBytes;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass UploadTaskCompat {\r\n    constructor(_delegate, _ref) {\r\n        this._delegate = _delegate;\r\n        this._ref = _ref;\r\n        this.cancel = this._delegate.cancel.bind(this._delegate);\r\n        this.catch = this._delegate.catch.bind(this._delegate);\r\n        this.pause = this._delegate.pause.bind(this._delegate);\r\n        this.resume = this._delegate.resume.bind(this._delegate);\r\n    }\r\n    get snapshot() {\r\n        return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\r\n    }\r\n    then(onFulfilled, onRejected) {\r\n        return this._delegate.then(snapshot => {\r\n            if (onFulfilled) {\r\n                return onFulfilled(new UploadTaskSnapshotCompat(snapshot, this, this._ref));\r\n            }\r\n        }, onRejected);\r\n    }\r\n    on(type, nextOrObserver, error, completed) {\r\n        let wrappedNextOrObserver = undefined;\r\n        if (!!nextOrObserver) {\r\n            if (typeof nextOrObserver === 'function') {\r\n                wrappedNextOrObserver = (taskSnapshot) => nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref));\r\n            }\r\n            else {\r\n                wrappedNextOrObserver = {\r\n                    next: !!nextOrObserver.next\r\n                        ? (taskSnapshot) => nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref))\r\n                        : undefined,\r\n                    complete: nextOrObserver.complete || undefined,\r\n                    error: nextOrObserver.error || undefined\r\n                };\r\n            }\r\n        }\r\n        return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\r\n    }\r\n}\n\nclass ListResultCompat {\r\n    constructor(_delegate, _service) {\r\n        this._delegate = _delegate;\r\n        this._service = _service;\r\n    }\r\n    get prefixes() {\r\n        return this._delegate.prefixes.map(ref => new ReferenceCompat(ref, this._service));\r\n    }\r\n    get items() {\r\n        return this._delegate.items.map(ref => new ReferenceCompat(ref, this._service));\r\n    }\r\n    get nextPageToken() {\r\n        return this._delegate.nextPageToken || null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ReferenceCompat {\r\n    constructor(_delegate, storage) {\r\n        this._delegate = _delegate;\r\n        this.storage = storage;\r\n    }\r\n    get name() {\r\n        return this._delegate.name;\r\n    }\r\n    get bucket() {\r\n        return this._delegate.bucket;\r\n    }\r\n    get fullPath() {\r\n        return this._delegate.fullPath;\r\n    }\r\n    toString() {\r\n        return this._delegate.toString();\r\n    }\r\n    /**\r\n     * @returns A reference to the object obtained by\r\n     * appending childPath, removing any duplicate, beginning, or trailing\r\n     * slashes.\r\n     */\r\n    child(childPath) {\r\n        const reference = _getChild(this._delegate, childPath);\r\n        return new ReferenceCompat(reference, this.storage);\r\n    }\r\n    get root() {\r\n        return new ReferenceCompat(this._delegate.root, this.storage);\r\n    }\r\n    /**\r\n     * @returns A reference to the parent of the\r\n     * current object, or null if the current object is the root.\r\n     */\r\n    get parent() {\r\n        const reference = this._delegate.parent;\r\n        if (reference == null) {\r\n            return null;\r\n        }\r\n        return new ReferenceCompat(reference, this.storage);\r\n    }\r\n    /**\r\n     * Uploads a blob to this object's location.\r\n     * @param data - The blob to upload.\r\n     * @returns An UploadTask that lets you control and\r\n     * observe the upload.\r\n     */\r\n    put(data, metadata) {\r\n        this._throwIfRoot('put');\r\n        return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);\r\n    }\r\n    /**\r\n     * Uploads a string to this object's location.\r\n     * @param value - The string to upload.\r\n     * @param format - The format of the string to upload.\r\n     * @returns An UploadTask that lets you control and\r\n     * observe the upload.\r\n     */\r\n    putString(value, format = StringFormat.RAW, metadata) {\r\n        this._throwIfRoot('putString');\r\n        const data = _dataFromString(format, value);\r\n        const metadataClone = Object.assign({}, metadata);\r\n        if (metadataClone['contentType'] == null && data.contentType != null) {\r\n            metadataClone['contentType'] = data.contentType;\r\n        }\r\n        return new UploadTaskCompat(new _UploadTask(this._delegate, new _FbsBlob(data.data, true), metadataClone), this);\r\n    }\r\n    /**\r\n     * List all items (files) and prefixes (folders) under this storage reference.\r\n     *\r\n     * This is a helper method for calling list() repeatedly until there are\r\n     * no more results. The default pagination size is 1000.\r\n     *\r\n     * Note: The results may not be consistent if objects are changed while this\r\n     * operation is running.\r\n     *\r\n     * Warning: listAll may potentially consume too many resources if there are\r\n     * too many results.\r\n     *\r\n     * @returns A Promise that resolves with all the items and prefixes under\r\n     *  the current storage reference. `prefixes` contains references to\r\n     *  sub-directories and `items` contains references to objects in this\r\n     *  folder. `nextPageToken` is never returned.\r\n     */\r\n    listAll() {\r\n        return listAll(this._delegate).then(r => new ListResultCompat(r, this.storage));\r\n    }\r\n    /**\r\n     * List items (files) and prefixes (folders) under this storage reference.\r\n     *\r\n     * List API is only available for Firebase Rules Version 2.\r\n     *\r\n     * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n     * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n     *\r\n     * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n     * support objects whose paths end with \"/\" or contain two consecutive\r\n     * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n     * list() may fail if there are too many unsupported objects in the bucket.\r\n     *\r\n     * @param options - See ListOptions for details.\r\n     * @returns A Promise that resolves with the items and prefixes.\r\n     * `prefixes` contains references to sub-folders and `items`\r\n     * contains references to objects in this folder. `nextPageToken`\r\n     * can be used to get the rest of the results.\r\n     */\r\n    list(options) {\r\n        return list(this._delegate, options || undefined).then(r => new ListResultCompat(r, this.storage));\r\n    }\r\n    /**\r\n     * A `Promise` that resolves with the metadata for this object. If this\r\n     * object doesn't exist or metadata cannot be retreived, the promise is\r\n     * rejected.\r\n     */\r\n    getMetadata() {\r\n        return getMetadata(this._delegate);\r\n    }\r\n    /**\r\n     * Updates the metadata for this object.\r\n     * @param metadata - The new metadata for the object.\r\n     * Only values that have been explicitly set will be changed. Explicitly\r\n     * setting a value to null will remove the metadata.\r\n     * @returns A `Promise` that resolves\r\n     * with the new metadata for this object.\r\n     * @see firebaseStorage.Reference.prototype.getMetadata\r\n     */\r\n    updateMetadata(metadata) {\r\n        return updateMetadata(this._delegate, metadata);\r\n    }\r\n    /**\r\n     * @returns A `Promise` that resolves with the download\r\n     * URL for this object.\r\n     */\r\n    getDownloadURL() {\r\n        return getDownloadURL(this._delegate);\r\n    }\r\n    /**\r\n     * Deletes the object at this location.\r\n     * @returns A `Promise` that resolves if the deletion succeeds.\r\n     */\r\n    delete() {\r\n        this._throwIfRoot('delete');\r\n        return deleteObject(this._delegate);\r\n    }\r\n    _throwIfRoot(name) {\r\n        if (this._delegate._location.path === '') {\r\n            throw _invalidRootOperation(name);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\r\nclass StorageServiceCompat {\r\n    constructor(app, _delegate) {\r\n        this.app = app;\r\n        this._delegate = _delegate;\r\n    }\r\n    get maxOperationRetryTime() {\r\n        return this._delegate.maxOperationRetryTime;\r\n    }\r\n    get maxUploadRetryTime() {\r\n        return this._delegate.maxUploadRetryTime;\r\n    }\r\n    /**\r\n     * Returns a firebaseStorage.Reference for the given path in the default\r\n     * bucket.\r\n     */\r\n    ref(path) {\r\n        if (isUrl(path)) {\r\n            throw _invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\r\n        }\r\n        return new ReferenceCompat(ref(this._delegate, path), this);\r\n    }\r\n    /**\r\n     * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n     * which must be a gs:// or http[s]:// URL.\r\n     */\r\n    refFromURL(url) {\r\n        if (!isUrl(url)) {\r\n            throw _invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\r\n        }\r\n        try {\r\n            _Location.makeFromUrl(url, this._delegate.host);\r\n        }\r\n        catch (e) {\r\n            throw _invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\r\n        }\r\n        return new ReferenceCompat(ref(this._delegate, url), this);\r\n    }\r\n    setMaxUploadRetryTime(time) {\r\n        this._delegate.maxUploadRetryTime = time;\r\n    }\r\n    setMaxOperationRetryTime(time) {\r\n        this._delegate.maxOperationRetryTime = time;\r\n    }\r\n    useEmulator(host, port, options = {}) {\r\n        connectStorageEmulator(this._delegate, host, port, options);\r\n    }\r\n}\r\nfunction isUrl(path) {\r\n    return /^[A-Za-z]+:\\/\\//.test(path);\r\n}\n\nconst name = \"@firebase/storage-compat\";\nconst version = \"0.3.2\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Storage.\r\n */\r\nconst STORAGE_TYPE = 'storage-compat';\r\nfunction factory(container, { instanceIdentifier: url }) {\r\n    // Dependencies\r\n    const app = container.getProvider('app-compat').getImmediate();\r\n    const storageExp = container\r\n        .getProvider('storage')\r\n        .getImmediate({ identifier: url });\r\n    const storageServiceCompat = new StorageServiceCompat(app, storageExp);\r\n    return storageServiceCompat;\r\n}\r\nfunction registerStorage(instance) {\r\n    const namespaceExports = {\r\n        // no-inline\r\n        TaskState: _TaskState,\r\n        TaskEvent: _TaskEvent,\r\n        StringFormat,\r\n        Storage: StorageServiceCompat,\r\n        Reference: ReferenceCompat\r\n    };\r\n    instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */)\r\n        .setServiceProps(namespaceExports)\r\n        .setMultipleInstances(true));\r\n    instance.registerVersion(name, version);\r\n}\r\nregisterStorage(firebase);\n\nexport { registerStorage };\n//# sourceMappingURL=index.esm2017.js.map\n"],"sourceRoot":""}